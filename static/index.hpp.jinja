#include <unordered_map>
#include <vector>

/* Child and page sizes. */
typedef int child_s;
typedef int page_s;

/* Int as pointers. */
typedef int char_p;
typedef int child_p;
typedef int page_p;

/* A node of the Radix tree. */
struct Node {
    char_p chars;
    child_p children;
    page_p pages;
    /* The number of children. */
    child_s child_count;
    /* The number of pages. Is zero when this node is not an end. */
    page_s page_count;
};

/* Struct storing the data associated with a page. */
public Page {
    short page_index;
    short count;
};

const char *urltitles[] = {{ '{' }}{% for item in urltitles -%}
    "{{ item[0] }}\n{{ item[1] }}\n"{% if not loop.last %},{% endif %}
{%- endfor %}{{ '}' }};

const char node_data[] = {{ '{' }}{{ node_arr }}{{ '}' }};

const char children_data[] = {{ '{' }}{{ children_arr }}{{ '}' }};

const char page_data[] = {{ '{' }}{{ page_arr }}{{ '}' }};

const char chars[] = "{{char_arr}}";

const Node *nodes = (Node *) node_data;
const child_p *children = (child_p *) node_data;
const Page *pages = (Page *) page_data;
