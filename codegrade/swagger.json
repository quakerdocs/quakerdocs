{
    "openapi": "3.0.3",
    "info": {
        "title": "CodeGrade",
        "description": "Welcome to the backend of CodeGrade.\n\nTo start using the API you probably first need to login. You can do this by using the `/api/v1/login/` To retrieve your tenant you can use the `/api/v1/tenants/` list. If you are using one of our API client libraries there are special utility methods to login.\n\nAfter logging in you should have retrieved your access token, which should be used as JWT token. This means you should add it to the `Authorization` header, like this: `Authorization: Bearer <token>` This means that `GET` requests will never change state, and thus can be performed safely. We communicate errors by using the status code of the HTTP response, this means that the response body will not contain a `ok` For any deprecations, check the `Warning` header of the response as this will contain a warning if you use a deprecated route.",
        "version": "14.0.0",
        "license": {
            "name": "AGPL-3.0",
            "url": "http://www.gnu.org/licenses/agpl-3.0.html"
        },
        "contact": {
            "url": "https://codegrade.com",
            "email": "support@codegrade.com"
        }
    },
    "servers": [
        {
            "url": "https://{instance}.codegra.de",
            "variables": {
                "instance": {
                    "description": "The instance you are on",
                    "default": "app"
                }
            }
        }
    ],
    "paths": {
        "/api/v1/about": {
            "get": {
                "responses": {
                    "200": {
                        "description": "The response if no errors occured",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/About"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "summary": "Get",
                "description": "Get information about this CodeGrade instance.",
                "tags": [
                    "About"
                ],
                "operationId": "about_get",
                "x-returns": "The about object for this instance."
            }
        },
        "/api/v1/assignments/{assignmentId}/rubrics/": {
            "put": {
                "responses": {
                    "200": {
                        "description": "The response if no errors occured",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/RubricRowBase"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "summary": "Put Rubric",
                "description": "Add or update rubric of an assignment.",
                "tags": [
                    "Assignment"
                ],
                "operationId": "assignment_put_rubric",
                "x-returns": "The updated or created rubric.",
                "parameters": [
                    {
                        "name": "assignmentId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The id of the assignment",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PutRubricAssignmentData"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "An empty response"
                    },
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "summary": "Delete Rubric",
                "description": "Delete the rubric for the given assignment.",
                "tags": [
                    "Assignment"
                ],
                "operationId": "assignment_delete_rubric",
                "x-returns": "Nothing.",
                "parameters": [
                    {
                        "name": "assignmentId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The id of the <span data-role=\"class\">.models.Assignment</span> whose rubric should be deleted.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "The response if no errors occured",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/RubricRowBase"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "summary": "Get Rubric",
                "description": "Return the rubric corresponding to the given `assignment_id`.",
                "tags": [
                    "Assignment"
                ],
                "operationId": "assignment_get_rubric",
                "x-returns": "A list of JSON of <span data-role=\"class\">.models.RubricRows</span> items.",
                "parameters": [
                    {
                        "name": "assignmentId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The id of the assignment.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/courses/": {
            "post": {
                "responses": {
                    "200": {
                        "description": "The response if no errors occured",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExtendedCourse"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "summary": "Create",
                "description": "Create a new course.",
                "tags": [
                    "Course"
                ],
                "operationId": "course_create",
                "x-returns": "A response containing the JSON serialization of the new course",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateCourseData"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "The response if no errors occured",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ExtendedCourse"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "summary": "Get All",
                "description": "Return all Course objects the current user is a member of.",
                "tags": [
                    "Course"
                ],
                "operationId": "course_get_all",
                "x-returns": "A response containing the JSON serialized courses",
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/groups/{groupId}/member": {
            "post": {
                "responses": {
                    "200": {
                        "description": "The response if no errors occured",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExtendedGroup"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "summary": "Add Member",
                "description": "Add a user (member) to a group.",
                "tags": [
                    "Group"
                ],
                "operationId": "group_add_member",
                "x-returns": "The group with the newly added user.",
                "parameters": [
                    {
                        "name": "groupId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The id of the group the user should be added to.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserInput"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/users/{userId}": {
            "patch": {
                "responses": {
                    "200": {
                        "description": "The response if no errors occured",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExtendedUser"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "summary": "Patch",
                "description": "Update the attributes of a user.",
                "tags": [
                    "User"
                ],
                "operationId": "user_patch",
                "x-returns": "The updated user.",
                "parameters": [
                    {
                        "name": "userId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The id of the user you want to change. Currently this can only be your own user id.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchUserData"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/auto_tests/{autoTestId}/copy": {
            "post": {
                "responses": {
                    "200": {
                        "description": "The response if no errors occured",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AutoTest"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "summary": "Copy",
                "description": "Copy the given AutoTest configuration.",
                "tags": [
                    "AutoTest"
                ],
                "operationId": "autotest_copy",
                "x-returns": "The copied AutoTest configuration.",
                "parameters": [
                    {
                        "name": "autoTestId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The id of the AutoTest config which should be copied.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CopyAutoTestData"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/auto_tests/": {
            "post": {
                "responses": {
                    "200": {
                        "description": "The response if no errors occured",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AutoTest"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "summary": "Create",
                "description": "Create a new AutoTest configuration.",
                "tags": [
                    "AutoTest"
                ],
                "operationId": "autotest_create",
                "x-returns": "The newly created AutoTest.",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateAutoTestData"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/auto_tests/{autoTestId}/sets/": {
            "post": {
                "responses": {
                    "200": {
                        "description": "The response if no errors occured",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AutoTestSet"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "summary": "Add Set",
                "description": "Create a new set within an AutoTest",
                "tags": [
                    "AutoTest"
                ],
                "operationId": "autotest_add_set",
                "x-returns": "The newly created set.",
                "parameters": [
                    {
                        "name": "autoTestId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The id of the AutoTest wherein you want to create a set.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/lti1.3/providers/": {
            "post": {
                "responses": {
                    "200": {
                        "description": "The response if no errors occured",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/FinalizedLTI1p3Provider"
                                        },
                                        {
                                            "$ref": "#/components/schemas/NonFinalizedLTI1p3Provider"
                                        },
                                        {
                                            "$ref": "#/components/schemas/FinalizedLTI1p1Provider"
                                        },
                                        {
                                            "$ref": "#/components/schemas/NonFinalizedLTI1p1Provider"
                                        }
                                    ],
                                    "nullable": false
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "summary": "Create",
                "description": "Create a new LTI 1.1 or 1.3 provider.\n\nThis route is part of the public API.",
                "tags": [
                    "LTI"
                ],
                "operationId": "lti_create",
                "x-returns": "The just created provider.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateLTIData"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/tenants/": {
            "post": {
                "responses": {
                    "200": {
                        "description": "The response if no errors occured",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExtendedTenant"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "summary": "Create",
                "description": "Create a new tenant.",
                "tags": [
                    "Tenant"
                ],
                "operationId": "tenant_create",
                "x-returns": "The newly created tenant.",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateTenantData"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "The response if no errors occured",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ExtendedTenant"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "summary": "Get All",
                "description": "Get all tenants of an instance.",
                "tags": [
                    "Tenant"
                ],
                "operationId": "tenant_get_all",
                "x-returns": "All the tenants of this instance.",
                "parameters": [
                    {
                        "in": "query",
                        "name": "with_statistics",
                        "schema": {
                            "type": "boolean",
                            "description": "",
                            "default": false
                        },
                        "description": "Add statistics to returned tenants, if you have permission too see the statistics.",
                        "required": false
                    }
                ]
            }
        },
        "/api/v1/courses/{courseId}/registration_links/": {
            "put": {
                "responses": {
                    "200": {
                        "description": "The response if no errors occured",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CourseRegistrationLink"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "summary": "Put Enroll Link",
                "description": "Create or edit an enroll link.",
                "tags": [
                    "Course"
                ],
                "operationId": "course_put_enroll_link",
                "x-returns": "The created or edited link.",
                "parameters": [
                    {
                        "name": "courseId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The id of the course in which this link should enroll users.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PutEnrollLinkCourseData"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/auto_tests/{autoTestId}": {
            "delete": {
                "responses": {
                    "204": {
                        "description": "An empty response"
                    },
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "summary": "Delete",
                "description": "Delete the given AutoTest.\n\nThis route fails if the AutoTest has any runs, which should be deleted separately.",
                "tags": [
                    "AutoTest"
                ],
                "operationId": "autotest_delete",
                "x-returns": "Nothing.",
                "parameters": [
                    {
                        "name": "autoTestId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The AutoTest that should be deleted.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "The response if no errors occured",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResultDataGetAutoTestGet"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "summary": "Get",
                "description": "Get the extended version of an `AutoTest` and its runs.",
                "tags": [
                    "AutoTest"
                ],
                "operationId": "autotest_get",
                "x-returns": "The extended serialization of an `AutoTest` and the extended serialization of its runs.",
                "parameters": [
                    {
                        "name": "autoTestId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The id of the AutoTest to get.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "latest_only",
                        "schema": {
                            "type": "boolean",
                            "description": "",
                            "default": false
                        },
                        "description": "Only retrieve the results of the latest submissions.",
                        "required": false
                    }
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "patch": {
                "responses": {
                    "200": {
                        "description": "The response if no errors occured",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AutoTest"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "summary": "Patch",
                "description": "Update the settings of an AutoTest configuration.",
                "tags": [
                    "AutoTest"
                ],
                "operationId": "autotest_patch",
                "x-returns": "The updated AutoTest.",
                "parameters": [
                    {
                        "name": "autoTestId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The id of the AutoTest you want to update.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchAutoTestData"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/auto_tests/{autoTestId}/runs/{runId}": {
            "delete": {
                "responses": {
                    "204": {
                        "description": "An empty response"
                    },
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "summary": "Stop Run",
                "description": "Delete an AutoTest run, this makes it possible to edit the AutoTest.\n\nThis also clears the rubric categories filled in by the AutoTest.",
                "tags": [
                    "AutoTest"
                ],
                "operationId": "autotest_stop_run",
                "x-returns": "Nothing.",
                "parameters": [
                    {
                        "name": "autoTestId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The id of the AutoTest of which the run should be deleted.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "runId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The id of the run which should be deleted.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "The response if no errors occured",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExtendedAutoTestRun"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "summary": "Get Run",
                "description": "Get the extended version of an `AutoTestRun` If you set the `latest_only` query parameter to a truthy value only the results of latest submissions will be provided.",
                "tags": [
                    "AutoTest"
                ],
                "operationId": "autotest_get_run",
                "x-returns": "The extended version of an `AutoTestRun`.",
                "parameters": [
                    {
                        "name": "autoTestId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The id of the AutoTest which is connected to the requested run.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "runId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The id of the run to get.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "latest_only",
                        "schema": {
                            "type": "boolean",
                            "description": "",
                            "default": false
                        },
                        "description": "Only retrieve the results for the latest submission by a user.",
                        "required": false
                    }
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/auto_tests/{autoTestId}/sets/{autoTestSetId}": {
            "delete": {
                "responses": {
                    "204": {
                        "description": "An empty response"
                    },
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "summary": "Delete Set",
                "description": "Delete an `AutoTestSet` (also known as level).",
                "tags": [
                    "AutoTest"
                ],
                "operationId": "autotest_delete_set",
                "x-returns": "Nothing.",
                "parameters": [
                    {
                        "name": "autoTestId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The id of the <span data-role=\"class\">.models.AutoTest</span> of the to be deleted set.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "autoTestSetId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The id of the <span data-role=\"class\">.models.AutoTestSet</span> that should be deleted.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "patch": {
                "responses": {
                    "200": {
                        "description": "The response if no errors occured",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AutoTestSet"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "summary": "Update Set",
                "description": "Update the given `AutoTestSet` (also known as level).",
                "tags": [
                    "AutoTest"
                ],
                "operationId": "autotest_update_set",
                "x-returns": "The updated set.",
                "parameters": [
                    {
                        "name": "autoTestId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The id of the `AutoTest` of the set that should be updated.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "autoTestSetId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The id of the `AutoTestSet` that should be updated.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateSetAutoTestData"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/assignments/{assignmentId}/peer_feedback_settings": {
            "delete": {
                "responses": {
                    "204": {
                        "description": "An empty response"
                    },
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "summary": "Disable Peer Feedback",
                "description": "Disabled peer feedback for an assignment.",
                "tags": [
                    "Assignment"
                ],
                "operationId": "assignment_disable_peer_feedback",
                "x-returns": "Nothing; an empty response.",
                "parameters": [
                    {
                        "name": "assignmentId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The id of the assignment for which you want to disable peer feedback.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/courses/{courseId}/roles/{roleId}": {
            "delete": {
                "responses": {
                    "204": {
                        "description": "An empty response"
                    },
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "summary": "Delete Role",
                "description": "Remove a CourseRole from the given Course.",
                "tags": [
                    "Course"
                ],
                "operationId": "course_delete_role",
                "x-returns": "An empty response with return code 204",
                "parameters": [
                    {
                        "name": "courseId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The id of the course",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "roleId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The id of the role you want to delete",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/submissions/{submissionId}/grader": {
            "delete": {
                "responses": {
                    "204": {
                        "description": "An empty response"
                    },
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "summary": "Delete Grader",
                "description": "Change the assigned grader of the given submission.",
                "tags": [
                    "Submission"
                ],
                "operationId": "submission_delete_grader",
                "x-returns": "Empty response and a 204 status.",
                "parameters": [
                    {
                        "name": "submissionId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The id of the submission.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            },
            "patch": {
                "responses": {
                    "204": {
                        "description": "An empty response"
                    },
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "summary": "Patch Grader",
                "description": "Change the assigned grader of the given submission.",
                "tags": [
                    "Submission"
                ],
                "operationId": "submission_patch_grader",
                "x-returns": "Empty response and a 204 status.",
                "parameters": [
                    {
                        "name": "submissionId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The id of the submission.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchGraderSubmissionData"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/api/v1/auto_tests/{testId}/sets/{setId}/suites/{suiteId}": {
            "delete": {
                "responses": {
                    "204": {
                        "description": "An empty response"
                    },
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "summary": "Delete Suite",
                "description": "Delete an `AutoTestSuite` (also known as category).",
                "tags": [
                    "AutoTest"
                ],
                "operationId": "autotest_delete_suite",
                "x-returns": "Nothing.",
                "parameters": [
                    {
                        "name": "testId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The id of the <span data-role=\"class\">.models.AutoTest</span> where the suite is located in.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "setId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The id of the <span data-role=\"class\">.models.AutoTestSet</span> where the suite is located in.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "suiteId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The id of the <span data-role=\"class\">.models.AutoTestSuite</span> you want to delete.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/assignments/": {
            "get": {
                "responses": {
                    "200": {
                        "description": "The response if no errors occured",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Assignment"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "summary": "Get All",
                "description": "Get all the assignments that the current user can see.",
                "tags": [
                    "Assignment"
                ],
                "operationId": "assignment_get_all",
                "x-returns": "All assignments (with a rubric if specified) that the current user can see.",
                "parameters": [
                    {
                        "in": "query",
                        "name": "only_with_rubric",
                        "schema": {
                            "type": "boolean",
                            "description": "",
                            "default": false
                        },
                        "description": "When `True` only assignments that have a rubric will be returned.",
                        "required": false
                    }
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/courses/{courseId}/users/": {
            "get": {
                "responses": {
                    "200": {
                        "description": "The response if no errors occured",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/UserCourse"
                                            }
                                        },
                                        {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/User"
                                            }
                                        }
                                    ],
                                    "nullable": false
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "summary": "Get All Users",
                "description": "Return a list of all <span data-role=\"class\">.models.User</span> objects and their",
                "tags": [
                    "Course"
                ],
                "operationId": "course_get_all_users",
                "x-returns": "A response containing the JSON serialized users and course roles",
                "parameters": [
                    {
                        "name": "courseId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The id of the course",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "put": {
                "responses": {
                    "200": {
                        "description": "The response if no errors occured",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserCourse"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "An empty response"
                    },
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "summary": "Change User Role",
                "description": "Set the `CourseRole` of a user in the given course.",
                "tags": [
                    "Course"
                ],
                "operationId": "course_change_user_role",
                "x-returns": "If the user\\_id parameter is set in the request the response will be empty with return code 204. Otherwise the response will contain the JSON serialized user and course role with return code 201",
                "parameters": [
                    {
                        "name": "courseId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The id of the course in which you want to enroll a new user, or change the role of an existing user.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ChangeUserRoleCourseData"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/assignments/{assignmentId}/graders/": {
            "get": {
                "responses": {
                    "200": {
                        "description": "The response if no errors occured",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/AssignmentGrader"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "summary": "Get All Graders",
                "description": "Gets a list of all users that can grade in the given assignment.",
                "tags": [
                    "Assignment"
                ],
                "operationId": "assignment_get_all_graders",
                "x-returns": "A response containing the JSON serialized graders.",
                "parameters": [
                    {
                        "name": "assignmentId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The id of the assignment",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/assignments/{assignmentId}/users/{userId}/submissions/": {
            "get": {
                "responses": {
                    "200": {
                        "description": "The response if no errors occured",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ExtendedWork"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "summary": "Get Submissions By User",
                "description": "Return all submissions by the given user in the given assignment.\n\nThis always returns extended version of the submissions.",
                "tags": [
                    "Assignment"
                ],
                "operationId": "assignment_get_submissions_by_user",
                "x-returns": "A response containing the JSON serialized submissions.",
                "parameters": [
                    {
                        "name": "assignmentId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The id of the assignment",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "userId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The user of which you want to get the submissions.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/assignments/{assignmentId}/submissions/": {
            "get": {
                "responses": {
                    "200": {
                        "description": "The response if no errors occured",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Work"
                                            }
                                        },
                                        {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/ExtendedWork"
                                            }
                                        }
                                    ],
                                    "nullable": false
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "summary": "Get All Submissions",
                "description": "Return all submissions for the given assignment.",
                "tags": [
                    "Assignment"
                ],
                "operationId": "assignment_get_all_submissions",
                "x-returns": "A response containing the JSON serialized submissions.",
                "parameters": [
                    {
                        "name": "assignmentId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The id of the assignment",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "extended",
                        "schema": {
                            "type": "boolean",
                            "description": "",
                            "default": false
                        },
                        "description": "Whether to get extended or normal submissions.",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "latest_only",
                        "schema": {
                            "type": "boolean",
                            "description": "",
                            "default": true
                        },
                        "description": "Only get the latest submission of a user. Please use this option if at all possible, as students have a tendency to submit many attempts and that can make this route quite slow. The default value was changed to `True` in version \"O\".",
                        "required": false
                    }
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/assignments/{assignmentId}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "The response if no errors occured",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Assignment"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "summary": "Get",
                "description": "Return the given <span data-role=\"class\">.models.Assignment</span>.",
                "tags": [
                    "Assignment"
                ],
                "operationId": "assignment_get",
                "x-returns": "A response containing the JSON serialized assignment",
                "parameters": [
                    {
                        "name": "assignmentId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The id of the assignment",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "patch": {
                "responses": {
                    "200": {
                        "description": "The response if no errors occured",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Assignment"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "summary": "Patch",
                "description": "Update the given assignment with new values.",
                "tags": [
                    "Assignment"
                ],
                "operationId": "assignment_patch",
                "x-returns": "The updated assignment.",
                "parameters": [
                    {
                        "name": "assignmentId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The id of the assignment you want to update.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchAssignmentData"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/assignments/{assignmentId}/feedbacks/": {
            "get": {
                "responses": {
                    "200": {
                        "description": "The response if no errors occured",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "$ref": "#/components/schemas/AssignmentFeedback"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "summary": "Get All Feedback",
                "description": "Get all feedbacks for all the latest submissions for a given assignment.",
                "tags": [
                    "Assignment"
                ],
                "operationId": "assignment_get_all_feedback",
                "x-returns": "A mapping between the id of the submission and a `AssignmentFeeback` object.",
                "parameters": [
                    {
                        "name": "assignmentId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The assignment to query for.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/assignments/{assignmentId}/auto_test": {
            "get": {
                "responses": {
                    "200": {
                        "description": "The response if no errors occured",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AutoTest"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "summary": "Get Auto Test",
                "description": "Get the AutoTest for this assignment.",
                "tags": [
                    "Assignment"
                ],
                "operationId": "assignment_get_auto_test",
                "x-returns": "The AutoTest for the given assignment, if it has an AutoTest.",
                "parameters": [
                    {
                        "name": "assignmentId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The id of the assignment from which you want to get the AutoTest.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/auto_tests/{autoTestId}/runs/{runId}/results/{resultId}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "The response if no errors occured",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExtendedAutoTestResult"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "summary": "Get Result",
                "description": "Get the extended version of an AutoTest result.",
                "tags": [
                    "AutoTest"
                ],
                "operationId": "autotest_get_result",
                "x-returns": "The extended version of a <span data-role=\"class\">.models.AutoTestResult</span>.",
                "parameters": [
                    {
                        "name": "autoTestId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The id of the AutoTest in which the result is located.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "runId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The id of run in which the result is located.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "resultId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The id of the result you want to get.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/auto_tests/{autoTestId}/runs/{runId}/submissions/{submissionId}/result": {
            "get": {
                "responses": {
                    "200": {
                        "description": "The response if no errors occured",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExtendedAutoTestResult"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "summary": "Get Result By Submission",
                "description": "Get the AutoTest result for a submission.",
                "tags": [
                    "AutoTest"
                ],
                "operationId": "autotest_get_result_by_submission",
                "x-returns": "The AutoTest result for the given data.",
                "parameters": [
                    {
                        "name": "autoTestId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The id of the AutoTest in which to get the result.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "runId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The id of the AutoTestRun in which to get the result.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "submissionId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The id of the submission from which you want to get the result.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/auto_tests/{autoTestId}/runs/{runId}/users/{userId}/results/": {
            "get": {
                "responses": {
                    "200": {
                        "description": "The response if no errors occured",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/AutoTestResult"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "summary": "Get Results By User",
                "description": "Get all AutoTest results for a given user.\n\nIf you don't have permission to see the results of the requested user an empty list will be returned.",
                "tags": [
                    "AutoTest"
                ],
                "operationId": "autotest_get_results_by_user",
                "x-returns": "The list of AutoTest results for the given user, sorted from oldest to latest.",
                "parameters": [
                    {
                        "name": "autoTestId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The id of the AutoTest in which to get the results.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "runId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The id of the AutoTestRun in which to get the results.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "userId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The id of the user of which we should get the results.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/auto_tests/{autoTestId}/runs/{runId}/step_results/{stepResultId}/attachment": {
            "get": {
                "responses": {
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    },
                    "200": {
                        "description": "The response if no errors occured",
                        "content": {
                            "application/octet-stream": {
                                "schema": {
                                    "type": "binary",
                                    "format": "binary"
                                }
                            }
                        }
                    }
                },
                "summary": "Get Attachment",
                "description": "Get the attachment of an AutoTest step.",
                "tags": [
                    "AutoTest"
                ],
                "operationId": "autotest_get_attachment",
                "x-returns": "The attachment data, as an application/octet-stream.",
                "parameters": [
                    {
                        "name": "autoTestId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The id of the AutoTest in which the result is located.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "runId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The id of run in which the result is located.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "stepResultId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The id of the step result of which you want the attachment.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/assignments/{assignmentId}/users/{userId}/comments/": {
            "get": {
                "responses": {
                    "200": {
                        "description": "The response if no errors occured",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CommentBase"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "summary": "Get Comments By User",
                "description": "Get all the comments threads that a user replied on.\n\nThis route is especially useful in the context of peer feedback. With this route you can get all the comments placed by the student, so you don't have to get all the submissions (including old ones) by the peer feedback subjects.",
                "tags": [
                    "Assignment"
                ],
                "operationId": "assignment_get_comments_by_user",
                "x-returns": "A list of comments that all have at least one reply by the given user. There might be replies missing from these bases if these replies where not given by the user with id `user_id`, however no guarantee is made that all replies are by the user with id `user_id`.",
                "parameters": [
                    {
                        "name": "assignmentId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The assignment from which you want to get the threads.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "userId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The id of the user from which you want to get the threads.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/courses/{courseId}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "The response if no errors occured",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExtendedCourse"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "summary": "Get",
                "description": "Get a course by id.",
                "tags": [
                    "Course"
                ],
                "operationId": "course_get",
                "x-returns": "A response containing the JSON serialized course",
                "parameters": [
                    {
                        "name": "courseId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The id of the course",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "patch": {
                "responses": {
                    "200": {
                        "description": "The response if no errors occured",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExtendedCourse"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "summary": "Patch",
                "description": "Update the given course with new values.",
                "tags": [
                    "Course"
                ],
                "operationId": "course_patch",
                "x-returns": "The updated course, in extended format.",
                "parameters": [
                    {
                        "name": "courseId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The id of the course you want to update.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchCourseData"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/assignments/{assignmentId}/course": {
            "get": {
                "responses": {
                    "200": {
                        "description": "The response if no errors occured",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExtendedCourse"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "summary": "Get Course",
                "description": "Get the course connected to an assignment.",
                "tags": [
                    "Assignment"
                ],
                "operationId": "assignment_get_course",
                "x-returns": "A response containing the JSON serialized course.",
                "parameters": [
                    {
                        "name": "assignmentId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The id of the assignment from which you want to get the course.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/courses/{courseId}/snippets/": {
            "get": {
                "responses": {
                    "200": {
                        "description": "The response if no errors occured",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CourseSnippet"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "summary": "Get Snippets",
                "description": "Get all snippets of the given course.",
                "tags": [
                    "Course"
                ],
                "operationId": "course_get_snippets",
                "x-returns": "An array containing all snippets for the given course.",
                "parameters": [
                    {
                        "name": "courseId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The id of the course from which you want to get the snippets.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/submissions/{submissionId}/feedbacks/": {
            "get": {
                "responses": {
                    "200": {
                        "description": "The response if no errors occured",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/FeedbackWithoutReplies"
                                        },
                                        {
                                            "$ref": "#/components/schemas/FeedbackWithReplies"
                                        }
                                    ],
                                    "nullable": false
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "summary": "Get Feedback",
                "description": "Get all feedback for a submission",
                "tags": [
                    "Submission"
                ],
                "operationId": "submission_get_feedback",
                "x-returns": "The feedback of this submission.",
                "parameters": [
                    {
                        "name": "submissionId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The submission of which you want to get the feedback.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "with_replies",
                        "schema": {
                            "type": "boolean",
                            "description": "",
                            "default": false
                        },
                        "description": "Do you want to include replies in with your comments? Starting with version \"O.1\" the default value will change to `True`.",
                        "required": false
                    }
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/files/{filename}": {
            "get": {
                "responses": {
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    },
                    "200": {
                        "description": "The response if no errors occured",
                        "content": {
                            "application/octet-stream": {
                                "schema": {
                                    "type": "binary",
                                    "format": "binary"
                                }
                            }
                        }
                    }
                },
                "summary": "Download",
                "description": "Serve some specific file in the uploads folder.\n\nWarning: The file will be deleted after you download it!",
                "tags": [
                    "File"
                ],
                "operationId": "file_download",
                "x-returns": "The requested file.",
                "parameters": [
                    {
                        "name": "filename",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The filename of the file to get.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "mime",
                        "schema": {
                            "type": "string",
                            "description": "",
                            "default": null
                        },
                        "description": "The mime type header to set on the response.",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "as_attachment",
                        "schema": {
                            "type": "boolean",
                            "description": "",
                            "default": false
                        },
                        "description": "If truthy the response will have a `Content-Disposition: attachment` header set.",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "schema": {
                            "type": "string",
                            "description": "",
                            "default": null
                        },
                        "description": "The filename for the attachment, defaults to the second part of the url.",
                        "required": false
                    }
                ]
            }
        },
        "/api/v1/auto_tests/{autoTestId}/fixtures/{fixtureId}": {
            "get": {
                "responses": {
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    },
                    "200": {
                        "description": "The response if no errors occured",
                        "content": {
                            "application/octet-stream": {
                                "schema": {
                                    "type": "binary",
                                    "format": "binary"
                                }
                            }
                        }
                    }
                },
                "summary": "Get Fixture",
                "description": "Get the contents of the given `AutoTestFixture`.",
                "tags": [
                    "AutoTest"
                ],
                "operationId": "autotest_get_fixture",
                "x-returns": "The content of the given fixture.",
                "parameters": [
                    {
                        "name": "autoTestId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The AutoTest this fixture is linked to.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "fixtureId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The id of the fixture which you want the content.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/assignments/{assignmentId}/webhook_settings": {
            "post": {
                "responses": {
                    "200": {
                        "description": "The response if no errors occured",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebhookBase"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "summary": "Get Webhook Settings",
                "description": "Create or get the webhook settings to hand-in submissions.\n\nYou can select the user for which the webhook should hand-in using the exact same query parameters as the route to upload a submission.",
                "tags": [
                    "Assignment"
                ],
                "operationId": "assignment_get_webhook_settings",
                "x-returns": "A serialized form of a webhook, which contains all data needed to add the webhook to your provider.",
                "parameters": [
                    {
                        "name": "assignmentId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The assignment for which the webhook should hand-in submissions.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "webhook_type",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "git"
                            ],
                            "description": ""
                        },
                        "description": "The webhook type, currently only `git` is supported, which works for both GitLab and GitHub.",
                        "required": true
                    }
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/submissions/{submissionId}/grade_history/": {
            "get": {
                "responses": {
                    "200": {
                        "description": "The response if no errors occured",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/GradeHistory"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "summary": "Get Grade History",
                "description": "Get the grade history for the given submission.",
                "tags": [
                    "Submission"
                ],
                "operationId": "submission_get_grade_history",
                "x-returns": "All the `GradeHistory` objects, which describe the history of this grade.",
                "parameters": [
                    {
                        "name": "submissionId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The submission for which you want to get the grade history.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/groups/{groupId}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "The response if no errors occured",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExtendedGroup"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "summary": "Get",
                "description": "Get a group by id.",
                "tags": [
                    "Group"
                ],
                "operationId": "group_get",
                "x-returns": "The requested group.",
                "parameters": [
                    {
                        "name": "groupId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The id of the group to get.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/assignments/{assignmentId}/groups/{groupId}/member_states/": {
            "get": {
                "responses": {
                    "200": {
                        "description": "The response if no errors occured",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "boolean"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "summary": "Get Member States",
                "description": "Get the LTI states for the members of a group for the given assignment.",
                "tags": [
                    "Assignment"
                ],
                "operationId": "assignment_get_member_states",
                "x-returns": "A mapping between user id and a boolean indicating if we can already passback grades for this user. If the assignment is any LTI assignment and any of the values in this mapping is `False` trying to submit anyway will result in a failure.",
                "parameters": [
                    {
                        "name": "assignmentId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The assignment for which the LTI states should be given.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "groupId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The group for which the states should be returned.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/courses/{courseId}/group_sets/": {
            "get": {
                "responses": {
                    "200": {
                        "description": "The response if no errors occured",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/GroupSet"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "summary": "Get Group Sets",
                "description": "Get the all the group sets of a given course.",
                "tags": [
                    "Course"
                ],
                "operationId": "course_get_group_sets",
                "x-returns": "A list of group sets.",
                "parameters": [
                    {
                        "name": "courseId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The id of the course of which the group sets should be retrieved.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/login_links/{loginLinkId}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "The response if no errors occured",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AssignmentLoginLink"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "summary": "Get",
                "description": "Get a login link and the connected assignment.",
                "tags": [
                    "Login Link"
                ],
                "operationId": "login link_get",
                "x-returns": "The requested login link, which will also contain information about the connected assignment.",
                "parameters": [
                    {
                        "name": "loginLinkId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The id of the login link you want to get.",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ]
            }
        },
        "/api/v1/settings/notification_settings/": {
            "get": {
                "responses": {
                    "200": {
                        "description": "The response if no errors occured",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotificationSetting"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "summary": "Get All Notification Settings",
                "description": "Update preferences for notifications.",
                "tags": [
                    "User Setting"
                ],
                "operationId": "user setting_get_all_notification_settings",
                "x-returns": "The preferences for the user as described by the `token`."
            },
            "patch": {
                "responses": {
                    "204": {
                        "description": "An empty response"
                    },
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "summary": "Patch Notification Setting",
                "description": "Update preferences for notifications.",
                "tags": [
                    "User Setting"
                ],
                "operationId": "user setting_patch_notification_setting",
                "x-returns": "Nothing.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchNotificationSettingUser SettingData"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/api/v1/assignments/{assignmentId}/users/{userId}/peer_feedback_subjects/": {
            "get": {
                "responses": {
                    "200": {
                        "description": "The response if no errors occured",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/AssignmentPeerFeedbackConnection"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "summary": "Get Peer Feedback Subjects",
                "description": "Get the peer feedback subjects for a given user.",
                "tags": [
                    "Assignment"
                ],
                "operationId": "assignment_get_peer_feedback_subjects",
                "x-returns": "The peer feedback subjects. If the deadline has not expired, or if the assignment is not a peer feedback assignment an empty list will be returned.",
                "parameters": [
                    {
                        "name": "assignmentId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The id of the assignment in which you want to get the peer feedback subjects.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "userId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The id of the user from which you want to retrieve the peer feedback subjects.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/assignments/{assignmentId}/plagiarism/": {
            "get": {
                "responses": {
                    "200": {
                        "description": "The response if no errors occured",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/PlagiarismRun"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "summary": "Get All Plagiarism Runs",
                "description": "Get all plagiarism runs for the given assignment.",
                "tags": [
                    "Assignment"
                ],
                "operationId": "assignment_get_all_plagiarism_runs",
                "x-returns": "A response containing the JSON serialized list of plagiarism runs.",
                "parameters": [
                    {
                        "name": "assignmentId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The id of the assignment",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/comments/{commentBaseId}/replies/{replyId}/edits/": {
            "get": {
                "responses": {
                    "200": {
                        "description": "The response if no errors occured",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CommentReplyEdit"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "summary": "Get All Reply Edits",
                "description": "Get the edits of a reply.",
                "tags": [
                    "Comment"
                ],
                "operationId": "comment_get_all_reply_edits",
                "x-returns": "A list of edits, sorted from newest to oldest.",
                "parameters": [
                    {
                        "name": "commentBaseId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The base of the given reply.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "replyId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The id of the reply for which you want to get the replies.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/submissions/{submissionId}/rubrics/": {
            "get": {
                "responses": {
                    "200": {
                        "description": "The response if no errors occured",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Work.RubricResultAsJSON"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "summary": "Get Rubric Result",
                "description": "Get the full rubric result of the given submission (work).",
                "tags": [
                    "Submission"
                ],
                "operationId": "submission_get_rubric_result",
                "x-returns": "The rubric result of the given submission, which also contains the rubric.",
                "parameters": [
                    {
                        "name": "submissionId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The id of the submission",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/site_settings/": {
            "get": {
                "responses": {
                    "200": {
                        "description": "The response if no errors occured",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/AllSiteSettings"
                                        },
                                        {
                                            "$ref": "#/components/schemas/FrontendSiteSettings"
                                        }
                                    ],
                                    "nullable": false
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "summary": "Get All",
                "description": "Get the settings for this CodeGrade instance.",
                "tags": [
                    "Site Settings"
                ],
                "operationId": "site settings_get_all",
                "x-returns": "The site settings for this instance.",
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "patch": {
                "responses": {
                    "200": {
                        "description": "The response if no errors occured",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/AllSiteSettings"
                                        },
                                        {
                                            "$ref": "#/components/schemas/FrontendSiteSettings"
                                        }
                                    ],
                                    "nullable": false
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "summary": "Patch",
                "description": "Update the settings for this CodeGrade instance.",
                "tags": [
                    "Site Settings"
                ],
                "operationId": "site settings_patch",
                "x-returns": "The updated site settings.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchSite SettingsData"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/snippets/": {
            "get": {
                "responses": {
                    "200": {
                        "description": "The response if no errors occured",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Snippet"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "summary": "Get All",
                "description": "Get all snippets of the current user.",
                "tags": [
                    "Snippet"
                ],
                "operationId": "snippet_get_all",
                "x-returns": "An array containing all snippets for the currently logged in user.",
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/submissions/{submissionId}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "The response if no errors occured",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/ExtendedWork"
                                        },
                                        {
                                            "type": "object",
                                            "additionalProperties": {
                                                "type": "string"
                                            }
                                        }
                                    ],
                                    "nullable": false
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "summary": "Get",
                "description": "Get the given submission (also called work) by id.",
                "tags": [
                    "Submission"
                ],
                "operationId": "submission_get",
                "x-returns": "The requested submission, or one of the other types as requested by the `type` query parameter.",
                "parameters": [
                    {
                        "name": "submissionId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The id of the submission",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "type",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "zip",
                                "feedback",
                                "default"
                            ],
                            "description": "",
                            "default": "default"
                        },
                        "description": "If passed this cause you not to receive a submission object. What you will receive will depend on the value passed. If you pass `zip` If you pass `feedback` you will receive a text file with a textual representation of all the feedback given on this submission.",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "owner",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "student",
                                "teacher",
                                "auto"
                            ],
                            "description": "",
                            "default": "auto"
                        },
                        "description": "This query parameter is only used when `type=='zip'`. It will determine which revision is used to generate the zip file.",
                        "required": false
                    }
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "patch": {
                "responses": {
                    "200": {
                        "description": "The response if no errors occured",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExtendedWork"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "summary": "Patch",
                "description": "Update the given submission with new values.",
                "tags": [
                    "Submission"
                ],
                "operationId": "submission_patch",
                "x-returns": "The updated submission.",
                "parameters": [
                    {
                        "name": "submissionId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The id of the submission.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchSubmissionData"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/api/v1/tasks/": {
            "get": {
                "responses": {
                    "200": {
                        "description": "The response if no errors occured",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResultDataGetTask ResultGetAll"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "summary": "Get All",
                "description": "Get all active tasks, all tasks that have not yet been started, a page of finished tasks, and the total number of finished tasks.",
                "tags": [
                    "Task Result"
                ],
                "operationId": "task result_get_all",
                "x-returns": "The requested tasks, with the given limits applied to the finished jobs.",
                "parameters": [
                    {
                        "in": "query",
                        "name": "offset",
                        "schema": {
                            "type": "integer",
                            "description": "",
                            "default": 0
                        },
                        "description": "First finished task to get.",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "description": "",
                            "default": 50
                        },
                        "description": "Amount of finished tasks to get.",
                        "required": false
                    }
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/task_results/{taskResultId}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "The response if no errors occured",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Job"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "summary": "Get",
                "description": "Get the state of a task result.\n\nTo check if the task failed you should use the `state` attribute of the returned object as the status code of the response will still be 200. It is 200 as we successfully fulfilled the request, which was getting the task result.",
                "tags": [
                    "Task Result"
                ],
                "operationId": "task result_get",
                "x-returns": "The retrieved task result.",
                "parameters": [
                    {
                        "name": "taskResultId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The task result to get.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/tenants/{tenantId}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "The response if no errors occured",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExtendedTenant"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "summary": "Get",
                "description": "Get a tenant by id.",
                "tags": [
                    "Tenant"
                ],
                "operationId": "tenant_get",
                "x-returns": "The tenant with the given id.",
                "parameters": [
                    {
                        "name": "tenantId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The id of the tenant you want to retrieve.",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "in": "query",
                        "name": "with_statistics",
                        "schema": {
                            "type": "boolean",
                            "description": "",
                            "default": false
                        },
                        "description": "Add statistics to returned tenant, if you have permission too see the statistics.",
                        "required": false
                    }
                ]
            },
            "patch": {
                "responses": {
                    "200": {
                        "description": "The response if no errors occured",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExtendedTenant"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "summary": "Patch",
                "description": "Update a tenant by id.",
                "tags": [
                    "Tenant"
                ],
                "operationId": "tenant_patch",
                "x-returns": "The updated tenant.",
                "parameters": [
                    {
                        "name": "tenantId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The id of the tenant you want to update.",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "in": "query",
                        "name": "with_statistics",
                        "schema": {
                            "type": "boolean",
                            "description": "",
                            "default": false
                        },
                        "description": "Add statistics to returned tenant, if you have permission too see the statistics.",
                        "required": false
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchTenantData"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/tenants/{tenantId}/logo": {
            "get": {
                "responses": {
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    },
                    "200": {
                        "description": "The response if no errors occured",
                        "content": {
                            "application/octet-stream": {
                                "schema": {
                                    "type": "binary",
                                    "format": "binary"
                                }
                            }
                        }
                    }
                },
                "summary": "Get Logo",
                "description": "Get the logo of a tenant.",
                "tags": [
                    "Tenant"
                ],
                "operationId": "tenant_get_logo",
                "x-returns": "The logo of the tenant.",
                "parameters": [
                    {
                        "name": "tenantId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The id of the tenant for which you want to get the logo.",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "in": "query",
                        "name": "dark",
                        "schema": {
                            "type": "boolean",
                            "description": "",
                            "default": false
                        },
                        "description": "If truhty the retrieved logo will be suited for the dark theme.",
                        "required": false
                    }
                ]
            }
        },
        "/api/v1/tenants/{tenantId}/statistics/": {
            "get": {
                "responses": {
                    "200": {
                        "description": "The response if no errors occured",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TenantStatistics"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "summary": "Get Stats",
                "description": "Get the statistics of a tenant.",
                "tags": [
                    "Tenant"
                ],
                "operationId": "tenant_get_stats",
                "x-returns": "The statistics of the specified tenant.",
                "parameters": [
                    {
                        "name": "tenantId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The id of the tenant for which you want to get the statistics.",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/settings/ui_preferences/{name}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "The response if no errors occured",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "boolean",
                                    "nullable": true
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "summary": "Get Ui Preference",
                "description": "Get a single UI preferences.",
                "tags": [
                    "User Setting"
                ],
                "operationId": "user setting_get_ui_preference",
                "x-returns": "The preferences for the user as described by the `token`.",
                "parameters": [
                    {
                        "name": "name",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The preference name you want to get.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/v1/settings/ui_preferences/": {
            "get": {
                "responses": {
                    "200": {
                        "description": "The response if no errors occured",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "boolean",
                                        "nullable": true
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "summary": "Get All Ui Preferences",
                "description": "Get ui preferences.",
                "tags": [
                    "User Setting"
                ],
                "operationId": "user setting_get_all_ui_preferences",
                "x-returns": "The preferences for the user as described by the `token`."
            },
            "patch": {
                "responses": {
                    "204": {
                        "description": "An empty response"
                    },
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "summary": "Patch Ui Preference",
                "description": "Update ui preferences.",
                "tags": [
                    "User Setting"
                ],
                "operationId": "user setting_patch_ui_preference",
                "x-returns": "Nothing.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchUiPreferenceUser SettingData"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/api/v1/courses/{courseId}/users/{userId}/submissions/": {
            "get": {
                "responses": {
                    "200": {
                        "description": "The response if no errors occured",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/ExtendedWork"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "summary": "Get Submissions By User",
                "description": "Get all submissions by the given user in this course.",
                "tags": [
                    "Course"
                ],
                "operationId": "course_get_submissions_by_user",
                "x-returns": "A mapping between assignment id and the submissions done in that assignment by the given user. If the `latest_only` query parameter was used the value will still be an array of submissions, but the length will always be one. If the user didn't submit for an assignment the value might be empty or the id of the assignment will be missing from the returned object.",
                "parameters": [
                    {
                        "name": "courseId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The id of the course from which you want to get the submissions.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "userId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The id of the user of which you want to get the submissions.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "latest_only",
                        "schema": {
                            "type": "boolean",
                            "description": "",
                            "default": false
                        },
                        "description": "Only get the latest submission of a user. Please use this option if at all possible, as students have a tendency to submit many attempts and that can make this route quite slow.",
                        "required": false
                    }
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/auto_tests/{autoTestId}/fixtures/{fixtureId}/hide": {
            "delete": {
                "responses": {
                    "204": {
                        "description": "An empty response"
                    },
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "summary": "Show Fixture",
                "description": "Change the visibility of the given fixture.\n\nDoing a `POST` request to this route will hide the fixture, doing a `DELETE` request to this route will set `hidden` to `False`.",
                "tags": [
                    "AutoTest"
                ],
                "operationId": "autotest_show_fixture",
                "x-returns": "Nothing.",
                "parameters": [
                    {
                        "name": "autoTestId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The AutoTest this fixture is linked to.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "fixtureId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The fixture which you to hide or show.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "responses": {
                    "204": {
                        "description": "An empty response"
                    },
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "summary": "Hide Fixture",
                "description": "Change the visibility of the given fixture.\n\nDoing a `POST` request to this route will hide the fixture, doing a `DELETE` request to this route will set `hidden` to `False`.",
                "tags": [
                    "AutoTest"
                ],
                "operationId": "autotest_hide_fixture",
                "x-returns": "Nothing.",
                "parameters": [
                    {
                        "name": "autoTestId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The AutoTest this fixture is linked to.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "fixtureId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The fixture which you to hide or show.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/assignments/{assignmentId}/rubric": {
            "post": {
                "responses": {
                    "200": {
                        "description": "The response if no errors occured",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/RubricRowBase"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "summary": "Copy Rubric",
                "description": "Import a rubric from a different assignment.",
                "tags": [
                    "Assignment"
                ],
                "operationId": "assignment_copy_rubric",
                "x-returns": "The rubric rows of the assignment in which the rubric was imported, so the assignment with id `assignment_id` and not `old_assignment_id`.",
                "parameters": [
                    {
                        "name": "assignmentId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The id of the assignment in which you want to import the rubric. This assignment shouldn't have a rubric.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CopyRubricAssignmentData"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/login": {
            "post": {
                "responses": {
                    "200": {
                        "description": "The response if no errors occured",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResultDataPostUserLogin"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "summary": "Login",
                "description": "Login using your username and password.\n\n`permissions` to the user. The value will be a mapping indicating which global permissions this user has.",
                "tags": [
                    "User"
                ],
                "operationId": "user_login",
                "x-returns": "A response containing the JSON serialized user",
                "parameters": [
                    {
                        "in": "query",
                        "name": "with_permissions",
                        "schema": {
                            "type": "boolean",
                            "description": "",
                            "default": false
                        },
                        "description": "Return the global permissions of the newly logged in user.",
                        "required": false
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LoginUserData"
                            }
                        }
                    },
                    "required": true
                }
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "The response if no errors occured",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/User"
                                        },
                                        {
                                            "type": "object",
                                            "additionalProperties": {
                                                "type": "string"
                                            }
                                        },
                                        {
                                            "$ref": "#/components/schemas/ExtendedUser"
                                        }
                                    ],
                                    "nullable": false
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "summary": "Get",
                "description": "Get the info of the currently logged in user.",
                "tags": [
                    "User"
                ],
                "operationId": "user_get",
                "x-returns": "A response containing the JSON serialized user",
                "parameters": [
                    {
                        "in": "query",
                        "name": "type",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "roles",
                                "extended",
                                "default"
                            ],
                            "description": "",
                            "default": "default"
                        },
                        "description": "If this is `roles` a mapping between course\\_id and role name will be returned, if this is `extended` an `ExtendedUser` instead of a `User` will be returned.",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "extended",
                        "schema": {
                            "type": "boolean",
                            "description": "",
                            "default": false
                        },
                        "description": "If `true` this has the same effect as setting `type` to `extended`.",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "with_permissions",
                        "schema": {
                            "type": "boolean",
                            "description": "",
                            "default": false
                        },
                        "description": "Setting this to true will add the key `permissions` to the user. The value will be a mapping indicating which global permissions this user has.",
                        "required": false
                    }
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/login_links/{loginLinkId}/login": {
            "post": {
                "responses": {
                    "200": {
                        "description": "The response if no errors occured",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResultDataPostLogin LinkLogin"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "summary": "Login",
                "description": "Login with the given login link.\n\nThis will only work when the assignment connected to this link is available, and the lock date has not expired. The received JWT token will only be valid until the 30 minutes after the lock date, and only in the course connected to this link.\n\nThe scope of the returned token will change in the future, this will not be considered a breaking change.",
                "tags": [
                    "Login Link"
                ],
                "operationId": "login link_login",
                "x-returns": "The logged in user and an access token.",
                "parameters": [
                    {
                        "name": "loginLinkId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The id of the login link you want to use to login.",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ]
            }
        },
        "/api/v1/user": {
            "post": {
                "responses": {
                    "200": {
                        "description": "The response if no errors occured",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResultDataPostUserRegister"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "summary": "Register",
                "description": "Create a new user.",
                "tags": [
                    "User"
                ],
                "operationId": "user_register",
                "x-returns": "The registered user and an `access_token` that can be used to perform requests as this new user.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RegisterUserData"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/api/v1/auto_tests/{autoTestId}/runs/{runId}/results/{resultId}/restart": {
            "post": {
                "responses": {
                    "200": {
                        "description": "The response if no errors occured",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExtendedAutoTestResult"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "summary": "Restart Result",
                "description": "Restart an AutoTest result.",
                "tags": [
                    "AutoTest"
                ],
                "operationId": "autotest_restart_result",
                "x-returns": "The extended version of a <span data-role=\"class\">.models.AutoTestResult</span>.",
                "parameters": [
                    {
                        "name": "autoTestId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The id of the AutoTest in which the result is located.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "runId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The id of run in which the result is located.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "resultId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The id of the result you want to restart.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/tasks/{taskResultId}/restart": {
            "post": {
                "responses": {
                    "204": {
                        "description": "An empty response"
                    },
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "summary": "Restart",
                "description": "Restart a task result.\n\nThe restarted task must not be in the `not_started`, `started`, or `finished` state.",
                "tags": [
                    "Task Result"
                ],
                "operationId": "task result_restart",
                "x-returns": "Nothing.",
                "parameters": [
                    {
                        "name": "taskResultId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The task result to restart.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/tasks/{taskResultId}/revoke": {
            "post": {
                "responses": {
                    "204": {
                        "description": "An empty response"
                    },
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "summary": "Revoke",
                "description": "Revoke a task result.\n\nThe revoked task must be in the \"not\\_started\" state.",
                "tags": [
                    "Task Result"
                ],
                "operationId": "task result_revoke",
                "x-returns": "Nothing.",
                "parameters": [
                    {
                        "name": "taskResultId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The task result to revoke.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/users/": {
            "get": {
                "responses": {
                    "200": {
                        "description": "The response if no errors occured",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/User"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "summary": "Search",
                "description": "Search for a user by name and username.",
                "tags": [
                    "User"
                ],
                "operationId": "user_search",
                "x-returns": "The users that match the given query string.",
                "parameters": [
                    {
                        "in": "query",
                        "name": "q",
                        "schema": {
                            "type": "string",
                            "description": ""
                        },
                        "description": "The string to search for, all SQL wildcard are escaped and spaces are replaced by wildcards.",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "exclude_course",
                        "schema": {
                            "type": "integer",
                            "description": "",
                            "default": null
                        },
                        "description": "Exclude all users that are in the given course from the search results. You need the permission `can_list_course_users` on this course to use this parameter.",
                        "required": false
                    }
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/submissions/{submissionId}/rubricitems/": {
            "patch": {
                "responses": {
                    "200": {
                        "description": "The response if no errors occured",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExtendedWork"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "summary": "Patch Rubric Result",
                "description": "Select the given rubric items for the given submission.",
                "tags": [
                    "Submission"
                ],
                "operationId": "submission_patch_rubric_result",
                "x-returns": "Nothing.",
                "parameters": [
                    {
                        "name": "submissionId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The submission to unselect the item for.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "copy_locked_items",
                        "schema": {
                            "type": "boolean",
                            "description": "",
                            "default": false
                        },
                        "description": "Should we maintain the selected items in locked rubric rows.",
                        "required": false
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchRubricResultSubmissionData"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/api/v1/courses/{courseId}/email": {
            "post": {
                "responses": {
                    "200": {
                        "description": "The response if no errors occured",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Job"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "summary": "Email Users",
                "description": "Sent the authors in this course an email.",
                "tags": [
                    "Course"
                ],
                "operationId": "course_email_users",
                "x-returns": "A task result that will send these emails.",
                "parameters": [
                    {
                        "name": "courseId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The id of the course in which you want to send the emails.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EmailUsersCourseData"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/assignments/{assignmentId}/graders/{graderId}/done": {
            "post": {
                "responses": {
                    "204": {
                        "description": "An empty response"
                    },
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "summary": "Mark Grader As Done",
                "description": "Indicate that the given grader is done grading the given assignment.",
                "tags": [
                    "Assignment"
                ],
                "operationId": "assignment_mark_grader_as_done",
                "x-returns": "An empty response with return code 204",
                "parameters": [
                    {
                        "name": "assignmentId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The id of the assignment the grader is done grading.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "graderId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The id of the :class:.models.User that is done grading.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "An empty response"
                    },
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "summary": "Mark Grader As Not Done",
                "description": "Indicate that the given grader is not yet done grading the given assignment.",
                "tags": [
                    "Assignment"
                ],
                "operationId": "assignment_mark_grader_as_not_done",
                "x-returns": "An empty response with return code 204",
                "parameters": [
                    {
                        "name": "assignmentId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The id of the assignment the grader is not yet done grading.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "graderId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The id of the :class:.models.User that is not yet done grading.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/auto_tests/{autoTestId}/runs/": {
            "post": {
                "responses": {
                    "200": {
                        "description": "The response if no errors occured",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "type": "object",
                                            "additionalProperties": {
                                                "type": "string",
                                                "enum": [
                                                    ""
                                                ]
                                            }
                                        },
                                        {
                                            "$ref": "#/components/schemas/ExtendedAutoTestRun"
                                        }
                                    ],
                                    "nullable": false
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "summary": "Start Run",
                "description": "Start a run for the given `AutoTest`.",
                "tags": [
                    "AutoTest"
                ],
                "operationId": "autotest_start_run",
                "x-returns": "The started run or a empty mapping if you do not have permission to see AutoTest runs.",
                "parameters": [
                    {
                        "name": "autoTestId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The id of the AutoTest for which you want to start a run.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/auto_tests/{autoTestId}/sets/{setId}/suites/": {
            "patch": {
                "responses": {
                    "200": {
                        "description": "The response if no errors occured",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AutoTestSuite"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "409": {
                        "$ref": "#/components/responses/IncorrectParametersError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/IncorrectPermissionsError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "5XX": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "summary": "Update Suite",
                "description": "Update or create a `AutoTestSuite` (also known as category)",
                "tags": [
                    "AutoTest"
                ],
                "operationId": "autotest_update_suite",
                "x-returns": "The just updated or created <span data-role=\"class\">.models.AutoTestSuite</span>.",
                "parameters": [
                    {
                        "name": "autoTestId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The id of the <span data-role=\"class\">.models.AutoTest</span> in which this suite should be created.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "setId",
                        "required": true,
                        "in": "path",
                        "style": "simple",
                        "description": "The id the <span data-role=\"class\">.models.AutoTestSet</span> in which this suite should be created.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateSuiteAutoTestData"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        }
    },
    "tags": [
        {
            "name": "About",
            "description": "Get information about this CodeGrade instance.\n\nYou can use this to get information about enabled features, settings, and version information."
        },
        {
            "name": "Assignment",
            "description": "All routes to used to manipulate and retrieve assignment objects and their relations."
        },
        {
            "name": "AutoTest",
            "description": "This module defines all API routes with the main directory \"auto\\_tests\". The APIs are used to create, start, and request information about AutoTests."
        },
        {
            "name": "Comment",
            "description": "This module defines all API routes for comments. With these routes you can create, edit and delete comments. Retrieving comments should be done using the route `/api/v1/submissions/<submission_id>/feedbacks/`."
        },
        {
            "name": "Course",
            "description": "All routes to used to manipulate and retrieve course objects and their relations."
        },
        {
            "name": "File",
            "description": "This module defines all API routes with the main directory \"files\". These APIs serve to upload and download temporary files which are not stored explicitly in the database."
        },
        {
            "name": "Group",
            "description": "This module defines all routes needed to manipulate a single group."
        },
        {
            "name": "LTI",
            "description": "This module implements all lti routes.\n\nMost of the routes in this modules should not be considered public. Only routes in this module explicitly stating that they are part of the public API should be considered stable and public."
        },
        {
            "name": "Login Link",
            "description": "This module defines all routes for login links."
        },
        {
            "name": "Site Settings",
            "description": "This module defines all API routes with site settings.\n\nAll routes in this module are useless unless you are an administrator. Simply use the `/about/` routes to retrieve site settings."
        },
        {
            "name": "Snippet",
            "description": "This module defines all API routes with the main directory \"snippet\" or \"snippets. These APIs can be used to add, modify, delete and retrieve the snippets of the current user."
        },
        {
            "name": "Submission",
            "description": "This module defines all API routes with the main directory \"submissions\". The APIs allow the retrieving, and patching of :class: Work objects. Furthermore functions are defined to get related objects and information."
        },
        {
            "name": "Task Result",
            "description": "This module contains all routes to view <span data-role=\"class\">.TaskResult</span>s."
        },
        {
            "name": "Tenant",
            "description": "This file contains all routes for the tenants of this instance."
        },
        {
            "name": "User",
            "description": "This module defines all API routes with the main directory \"users\". Thus the APIs in this module are mostly used to manipulate <span data-role=\"class\">.models.User</span> objects and their relations. However to manipulate the current logged in user the main directory \"login\" should be used."
        },
        {
            "name": "User Setting",
            "description": "This module defines all API routes with for user settings."
        }
    ],
    "components": {
        "schemas": {
            "APICodes": {
                "type": "string",
                "enum": [
                    "INCORRECT_PERMISSION",
                    "NOT_LOGGED_IN",
                    "OBJECT_ID_NOT_FOUND",
                    "OBJECT_WRONG_TYPE",
                    "MISSING_REQUIRED_PARAM",
                    "INVALID_PARAM",
                    "REQUEST_TOO_LARGE",
                    "LOGIN_FAILURE",
                    "INACTIVE_USER",
                    "INVALID_URL",
                    "OBJECT_NOT_FOUND",
                    "BLOCKED_ASSIGNMENT",
                    "INVALID_CREDENTIALS",
                    "INVALID_STATE",
                    "INVALID_OAUTH_REQUEST",
                    "DISABLED_SETTING",
                    "UNKOWN_ERROR",
                    "INVALID_FILE_IN_ARCHIVE",
                    "NO_FILES_SUBMITTED",
                    "RATE_LIMIT_EXCEEDED",
                    "OBJECT_ALREADY_EXISTS",
                    "INVALID_ARCHIVE",
                    "ROUTE_NOT_FOUND",
                    "WEAK_PASSWORD",
                    "INSUFFICIENT_GROUP_SIZE",
                    "ASSIGNMENT_RESULT_GROUP_NOT_READY",
                    "ASSIGNMENT_GROUP_FULL",
                    "UNSUPPORTED",
                    "ASSIGNMENT_DEADLINE_UNSET",
                    "PARSING_FAILED",
                    "UNSAFE_ARCHIVE",
                    "LOCKED_UPDATE",
                    "NOT_NEWEST_SUBMSSION",
                    "UPLOAD_TYPE_DISABLED",
                    "WEBHOOK_DIFFERENT_BRANCH",
                    "WEBHOOK_UNKNOWN_EVENT_TYPE",
                    "WEBHOOK_UNKOWN_TYPE",
                    "WEBHOOK_INVALID_REQUEST",
                    "WEBHOOK_UNKNOWN_REQUEST",
                    "WEBHOOK_DISABLED",
                    "OBJECT_EXPIRED",
                    "TOO_MANY_SUBMISSIONS",
                    "COOL_OFF_PERIOD_ACTIVE",
                    "MAILING_FAILED",
                    "LTI1_3_ERROR",
                    "LTI1_3_COOKIE_ERROR",
                    "LTI1_1_ERROR",
                    "IMAGE_BEING_CREATED",
                    "OBJECT_TOO_NEW"
                ],
                "description": "Internal API codes that are used by <span data-role=\"class\">APIException</span> objects."
            },
            "BaseError": {
                "type": "object",
                "x-is-error": true,
                "properties": {
                    "message": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "code": {
                        "$ref": "#/components/schemas/APICodes"
                    },
                    "request_id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "The id of the request that went wrong. Please include this id when reporting bugs."
                    }
                }
            },
            "BaseReleaseInfo": {
                "type": "object",
                "properties": {
                    "commit": {
                        "type": "string",
                        "description": "The commit which is running on this server."
                    }
                },
                "required": [
                    "commit"
                ],
                "description": "The part of the release info that will always be present.",
                "x-use-camelcase": true
            },
            "HealthInformation": {
                "type": "object",
                "properties": {
                    "application": {
                        "type": "boolean",
                        "description": "Always true."
                    },
                    "database": {
                        "type": "boolean",
                        "description": "Is the database ok?"
                    },
                    "uploads": {
                        "type": "boolean",
                        "description": "Is the upload storage system ok?"
                    },
                    "broker": {
                        "type": "boolean",
                        "description": "Can the broker be reached?"
                    },
                    "mirror_uploads": {
                        "type": "boolean",
                        "description": "Is the mirror upload storage system ok?"
                    },
                    "temp_dir": {
                        "type": "boolean",
                        "description": "Is the temporary directory on this server ok?"
                    }
                },
                "required": [
                    "application",
                    "database",
                    "uploads",
                    "broker",
                    "mirror_uploads",
                    "temp_dir"
                ],
                "description": "Information about the health of this instance.",
                "x-use-camelcase": true
            },
            "LegacyFeatures": {
                "type": "object",
                "properties": {
                    "AUTOMATIC_LTI_ROLE": {
                        "type": "boolean",
                        "description": "See settings."
                    },
                    "AUTO_TEST": {
                        "type": "boolean",
                        "description": "See settings."
                    },
                    "BLACKBOARD_ZIP_UPLOAD": {
                        "type": "boolean",
                        "description": "See settings."
                    },
                    "COURSE_REGISTER": {
                        "type": "boolean",
                        "description": "See settings."
                    },
                    "EMAIL_STUDENTS": {
                        "type": "boolean",
                        "description": "See settings."
                    },
                    "GROUPS": {
                        "type": "boolean",
                        "description": "See settings."
                    },
                    "INCREMENTAL_RUBRIC_SUBMISSION": {
                        "type": "boolean",
                        "description": "See settings."
                    },
                    "LTI": {
                        "type": "boolean",
                        "description": "See settings."
                    },
                    "PEER_FEEDBACK": {
                        "type": "boolean",
                        "description": "See settings."
                    },
                    "REGISTER": {
                        "type": "boolean",
                        "description": "See settings."
                    },
                    "RENDER_HTML": {
                        "type": "boolean",
                        "description": "See settings."
                    },
                    "RUBRICS": {
                        "type": "boolean",
                        "description": "See settings."
                    }
                },
                "required": [
                    "AUTOMATIC_LTI_ROLE",
                    "AUTO_TEST",
                    "BLACKBOARD_ZIP_UPLOAD",
                    "COURSE_REGISTER",
                    "EMAIL_STUDENTS",
                    "GROUPS",
                    "INCREMENTAL_RUBRIC_SUBMISSION",
                    "LTI",
                    "PEER_FEEDBACK",
                    "REGISTER",
                    "RENDER_HTML",
                    "RUBRICS"
                ],
                "description": "The legacy features of CodeGrade.\n\nPlease don't use this object, but instead check for enabled settings.",
                "x-use-camelcase": true
            },
            "ReleaseInfo": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BaseReleaseInfo"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "date": {
                                "type": "string",
                                "format": "date-time",
                                "description": "What date was the version released."
                            },
                            "version": {
                                "type": "string",
                                "description": "What version is running, this key might not be present."
                            },
                            "message": {
                                "type": "string",
                                "description": "A small message about the new features of this release."
                            },
                            "ui_preference": {
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/UIPreferenceName"
                                    }
                                ],
                                "description": "What `ui_preference` controls if we should show the release message."
                            }
                        }
                    }
                ],
                "description": "Information about the release running on the server."
            },
            "BaseAbout": {
                "type": "object",
                "properties": {
                    "version": {
                        "type": "string",
                        "nullable": true,
                        "description": "What version is running on this server. Deprecated, please use `version` instead."
                    },
                    "commit": {
                        "type": "string",
                        "description": "The commit this server is running. Deprecated, please use `commit` instead."
                    },
                    "features": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/LegacyFeatures"
                            }
                        ],
                        "description": "The features enabled on this instance. Deprecated, please use `settings`."
                    },
                    "settings": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/FrontendSiteSettings"
                            }
                        ],
                        "description": "The frontend settings and their values for this instance."
                    },
                    "release": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/ReleaseInfo"
                            }
                        ],
                        "description": "Information about the release running on this server."
                    },
                    "current_time": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The current time on the server"
                    }
                },
                "required": [
                    "version",
                    "commit",
                    "features",
                    "settings",
                    "release",
                    "current_time"
                ],
                "description": "The base information about this instance.",
                "x-use-camelcase": true
            },
            "About": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BaseAbout"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "health": {
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/HealthInformation"
                                    }
                                ],
                                "description": "Health information, will only be present when the correct (secret) health key is provided."
                            }
                        }
                    }
                ],
                "description": "Information about this CodeGrade instance."
            },
            "RubricDescriptionType": {
                "type": "string",
                "enum": [
                    "plain_text",
                    "markdown"
                ],
                "description": "The type of formatting used for the description of a rubric row or item."
            },
            "RubricLockReason": {
                "type": "string",
                "enum": [
                    "auto_test"
                ],
                "description": "An enumeration."
            },
            "BaseRubricItem": {
                "type": "object",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of this item"
                    },
                    "header": {
                        "type": "string",
                        "description": "The header of the item."
                    },
                    "points": {
                        "type": "number",
                        "description": "The amount of points a user gets when this item is selected."
                    }
                },
                "required": [
                    "description",
                    "header",
                    "points"
                ],
                "description": "The base serialization of a rubric item.",
                "x-use-camelcase": true
            },
            "RubricItem.InputAsJSON": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BaseRubricItem"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer",
                                "description": "The id of this rubric item. Pass this to update an existing rubric item, omit if you want to create a new item."
                            }
                        }
                    }
                ],
                "description": "The JSON needed to update a rubric item."
            },
            "RubricRowBase.InputBaseAsJSON": {
                "type": "object",
                "properties": {
                    "header": {
                        "type": "string",
                        "description": "The header of this row."
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of this row."
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RubricItem.InputAsJSON"
                        },
                        "description": "The items in this row."
                    }
                },
                "required": [
                    "header",
                    "description",
                    "items"
                ],
                "description": "The required part of the input data for a rubric row.",
                "x-use-camelcase": true
            },
            "RubricRowBase.InputAsJSON": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/RubricRowBase.InputBaseAsJSON"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer",
                                "description": "The id, pass this to update an existing row, omit it to create a new row."
                            },
                            "type": {
                                "type": "string",
                                "description": "The type of rubric row. Will default to \"normal\" if not passed."
                            }
                        }
                    }
                ],
                "description": "The JSON needed to update a rubric row."
            },
            "PutRubricAssignmentData": {
                "type": "object",
                "properties": {
                    "max_points": {
                        "type": "number",
                        "nullable": true,
                        "description": "The maximum amount of points you need to get for this rubric for full mark (i.e. a 10). By passing `null` you reset this value, by not passing it you keep its current value.'"
                    },
                    "rows": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RubricRowBase.InputAsJSON"
                        },
                        "description": "The rubric rows of this assignment. This will be the entire rubric, so to delete a row simply don't pass it in this list."
                    }
                }
            },
            "LMSCapabilities": {
                "type": "object",
                "properties": {
                    "lms": {
                        "type": "string",
                        "description": "The name of the LMS."
                    },
                    "set_deadline": {
                        "type": "boolean",
                        "description": "Is it possible for users to set the deadline of a CodeGrade assignment within CodeGrade?\n\nThis should be `True` if the LMS does **not** pass the deadline in the LTI launch, and `False` otherwise."
                    },
                    "set_lock_date": {
                        "type": "boolean",
                        "description": "Same as `set_deadline` but for the `lock_date` date."
                    },
                    "set_state": {
                        "type": "boolean",
                        "description": "Should the state of the assignment be set within CodeGrade and not be copied from the LMS?\n\nIf `False` users are not allowed to change to state of the assignment within CodeGrade (they can always set the state to done)."
                    },
                    "set_available_at": {
                        "type": "boolean",
                        "description": "Should the `available_at` of the assignment be set within CodeGrade and not be copied from the LMS?"
                    },
                    "test_student_name": {
                        "type": "string",
                        "nullable": true,
                        "description": "If there is a test student in the lms this its full name."
                    },
                    "cookie_post_message": {
                        "type": "string",
                        "nullable": true,
                        "description": "The name of the iframe `postMessage` If set to `None` this LMS doesn't have any post message that will allow us to send cookies (this is currently the case for all LMSes except `Canvas`)."
                    },
                    "supported_custom_replacement_groups": {
                        "type": "array",
                        "items": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "description": "A list of replacements groups (or namespaces) supported by this LMS.\n\nSome LMSes support more replacement variables than others, however we don't want to send replacement variables to an LMS we know it will never support. This property contains a list of custom replacement groups supported by this LMS.\n\nFor example: we have a replacement variable called `name'`, this variable will be included (parsed and returned as wanted config), if the `supported_custom_replacement_groups` contains `['$com']`. It will also be included if it contains `['$com', 'custom_lms']` However, it will not be included if it only contains `['$com.custom_lms']` or `['$com', 'other_lms']`."
                    },
                    "use_id_in_urls": {
                        "type": "boolean",
                        "description": "Should we use the `id` in the url.\n\nSome LMSes do not provide both the `iss` and the `client_id` This means that finding the correct `LTI1p3Provider` is not always correct (especially as the `iss` often gets used multiple times). For some LMSes therefore it is a better idea to simply include the id of the provider in the launch url, and verify with the given information that the provider could theoretically be the correct one (i.e. all given information matches with the information in the LTI provider that belongs to the `id`)."
                    },
                    "actual_deep_linking_required": {
                        "type": "boolean",
                        "description": "Does this LMS require actual deep linking, where the user inputs a name and deadline."
                    },
                    "auth_audience_required": {
                        "type": "boolean",
                        "description": "Is it required to set a separate OAuth2 Audience for this LMS before we can finalize it."
                    }
                },
                "required": [
                    "lms",
                    "set_deadline",
                    "set_lock_date",
                    "set_state",
                    "set_available_at",
                    "test_student_name",
                    "cookie_post_message",
                    "supported_custom_replacement_groups",
                    "use_id_in_urls",
                    "actual_deep_linking_required",
                    "auth_audience_required"
                ],
                "description": "This class defines the capabilities of an LMS connected using LTI 1.3.\n\nAn important note about naming in this class: most of the attribute names are not really intuitive. For example: *supporting* `set_deadline`1 classes, and 2) it describes what you can do inside CodeGrade with the LMS, maybe it is in the future possible to sync back the deadline to the LMS, and in this case the name `set_deadline` makes way more sense.",
                "x-use-camelcase": true
            },
            "BaseLTI1p3Provider": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BaseLTIProvider"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "capabilities": {
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/LMSCapabilities"
                                    }
                                ],
                                "description": "The capabilities of this LMS"
                            },
                            "version": {
                                "type": "string",
                                "enum": [
                                    "lti1.3"
                                ],
                                "description": "The LTI version used."
                            },
                            "iss": {
                                "type": "string",
                                "description": "The iss configured for this provider."
                            }
                        },
                        "required": [
                            "capabilities",
                            "version",
                            "iss"
                        ]
                    }
                ],
                "description": "The base representation of an LTI 1.3 provider."
            },
            "BaseLTIProvider": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of this LTI provider."
                    },
                    "lms": {
                        "type": "string",
                        "description": "The LMS that is connected as this LTI provider."
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The time this LTI provider was created."
                    },
                    "intended_use": {
                        "type": "string",
                        "description": "Who will use this LTI provider."
                    },
                    "tenant_id": {
                        "type": "string",
                        "nullable": true,
                        "description": "The id of the tenant that owns this provider."
                    }
                },
                "required": [
                    "id",
                    "lms",
                    "created_at",
                    "intended_use",
                    "tenant_id"
                ],
                "description": "The base JSON representation for an LTI 1.1 provider.",
                "x-use-camelcase": true
            },
            "BaseLTI1p1Provider": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BaseLTIProvider"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "version": {
                                "type": "string",
                                "enum": [
                                    "lti1.1"
                                ],
                                "description": "The LTI version used."
                            },
                            "supports_lock_date": {
                                "type": "boolean",
                                "description": "Can you set the `lock_date` of assignment connected to this LTI provider?"
                            }
                        },
                        "required": [
                            "version",
                            "supports_lock_date"
                        ]
                    }
                ],
                "description": "The base JSON representation of a LTI 1.1 provider."
            },
            "FileRule.InputData": {
                "type": "object",
                "properties": {
                    "rule_type": {
                        "type": "string",
                        "enum": [
                            "allow",
                            "deny",
                            "require"
                        ],
                        "description": "The type of rule"
                    },
                    "file_type": {
                        "type": "string",
                        "enum": [
                            "file",
                            "directory"
                        ],
                        "description": "The type of files this rule should apply to."
                    },
                    "name": {
                        "type": "string",
                        "description": "The pattern that describes which files this rule should apply to. This cannot be empty."
                    }
                },
                "required": [
                    "rule_type",
                    "file_type",
                    "name"
                ],
                "description": "The input data for a single file rule for the SubmissionValidator.",
                "x-use-camelcase": true
            },
            "Options.InputData": {
                "type": "object",
                "properties": {
                    "key": {
                        "type": "string",
                        "enum": [
                            "delete_empty_directories",
                            "remove_leading_directories",
                            "allow_override"
                        ],
                        "description": "What option is this."
                    },
                    "value": {
                        "type": "boolean",
                        "description": "Is this option enabled."
                    }
                },
                "required": [
                    "key",
                    "value"
                ],
                "description": "The input data for a single option for the SubmissionValidator.",
                "x-use-camelcase": true
            },
            "AssignmentPeerFeedbackSettings": {
                "type": "object",
                "properties": {
                    "amount": {
                        "type": "integer",
                        "description": "The amount of student that a single user should peer review."
                    },
                    "time": {
                        "type": "number",
                        "nullable": true,
                        "description": "The amount of time in seconds a user has after the deadline to do the peer review."
                    },
                    "auto_approved": {
                        "type": "boolean",
                        "description": "Should new peer feedback comments be considered approved by default or not."
                    }
                },
                "required": [
                    "amount",
                    "time",
                    "auto_approved"
                ],
                "description": "The peer feedback settings for an assignment.",
                "x-use-camelcase": true
            },
            "CreateCourseData": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the new course"
                    },
                    "tenant_id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "The id of the tenant for which this course is. If not provided this will default to your own tenant."
                    }
                },
                "required": [
                    "name"
                ]
            },
            "GlobalPermMap": {
                "type": "object",
                "properties": {
                    "can_add_users": {
                        "type": "boolean",
                        "description": "Users with this permission can add other users to the website."
                    },
                    "can_use_snippets": {
                        "type": "boolean",
                        "description": "Users with this permission can use the snippets feature on the website."
                    },
                    "can_edit_own_info": {
                        "type": "boolean",
                        "description": "Users with this permission can edit their own personal information."
                    },
                    "can_edit_own_password": {
                        "type": "boolean",
                        "description": "Users with this permission can edit their own password."
                    },
                    "can_create_courses": {
                        "type": "boolean",
                        "description": "Users with this permission can create new courses."
                    },
                    "can_manage_site_users": {
                        "type": "boolean",
                        "description": "Users with this permission can change the global permissions for other users on the site."
                    },
                    "can_search_users": {
                        "type": "boolean",
                        "description": "Users with this permission can search for users on the side, this means they can see all other users on the site."
                    },
                    "can_impersonate_users": {
                        "type": "boolean",
                        "description": "Users with this permission can impersonate users, i.e. they can login as other users."
                    },
                    "can_manage_lti_providers": {
                        "type": "boolean",
                        "description": "Users with this permission can edit and list existing, and create new LTI providers."
                    },
                    "can_manage_sso_providers": {
                        "type": "boolean",
                        "description": "Users with this permission can connect new SSO Identity Providers."
                    },
                    "can_manage_site_settings": {
                        "type": "boolean",
                        "description": "Users with this permission can manage the settings of this CodeGrade instance"
                    },
                    "can_manage_background_jobs": {
                        "type": "boolean",
                        "description": "Users with this permission can view, stop, and restart background jobs."
                    },
                    "can_create_tenant": {
                        "type": "boolean",
                        "description": "Users with this permission can create new tenants on the system"
                    },
                    "can_create_courses_for_other_tenants": {
                        "type": "boolean",
                        "description": "Users with this permission can create courses for other tenants than their own"
                    },
                    "can_see_other_tenant_statistics": {
                        "type": "boolean",
                        "description": "Users with this permission can see the statistics of their own and other tenants."
                    },
                    "can_search_users_other_tenant": {
                        "type": "boolean",
                        "description": "Users with this permission can search users of other tenants"
                    }
                },
                "required": [
                    "can_add_users",
                    "can_use_snippets",
                    "can_edit_own_info",
                    "can_edit_own_password",
                    "can_create_courses",
                    "can_manage_site_users",
                    "can_search_users",
                    "can_impersonate_users",
                    "can_manage_lti_providers",
                    "can_manage_sso_providers",
                    "can_manage_site_settings",
                    "can_manage_background_jobs",
                    "can_create_tenant",
                    "can_create_courses_for_other_tenants",
                    "can_see_other_tenant_statistics",
                    "can_search_users_other_tenant"
                ],
                "description": "The mapping between permission and value for a user.",
                "x-use-camelcase": false
            },
            "Group": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "The id of this gropu"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/UserWithoutGroup"
                        },
                        "description": "The members of this group."
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of this group."
                    },
                    "group_set_id": {
                        "type": "integer",
                        "description": "The id of the group set that this group is connected to."
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The datetime this group was created."
                    }
                },
                "required": [
                    "id",
                    "members",
                    "name",
                    "group_set_id",
                    "created_at"
                ],
                "description": "The group as JSON.",
                "x-use-camelcase": true
            },
            "UserWithoutGroup": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "The is the id of this user"
                    },
                    "name": {
                        "type": "string",
                        "description": "The fullname of the user. This might contain a first and last name, however this is not guaranteed."
                    },
                    "username": {
                        "type": "string",
                        "description": "The username of this user."
                    },
                    "is_test_student": {
                        "type": "boolean",
                        "description": "Is this user a test student."
                    },
                    "tenant_id": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true,
                        "description": "The tenant of the user"
                    }
                },
                "required": [
                    "id",
                    "name",
                    "username",
                    "is_test_student",
                    "tenant_id"
                ],
                "description": "The JSON representation of a user without the `group` property.",
                "x-use-camelcase": true
            },
            "PatchUserData": {
                "type": "object",
                "properties": {
                    "email": {
                        "type": "string",
                        "description": "Your new email"
                    },
                    "old_password": {
                        "type": "string",
                        "description": "Your old password"
                    },
                    "name": {
                        "type": "string",
                        "description": "Your new name"
                    },
                    "new_password": {
                        "type": "string",
                        "description": "Your new password"
                    },
                    "reset_email_on_lti": {
                        "type": "boolean",
                        "description": "Reset your email on the next LTI launch"
                    }
                }
            },
            "FileMixin": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of this file"
                    },
                    "name": {
                        "type": "string",
                        "description": "The local name of this file, this does **not** include any parent directory names, nor does it include trailing slashes for directories."
                    }
                },
                "required": [
                    "id",
                    "name"
                ],
                "description": "The base JSON representation of a file.",
                "x-use-camelcase": true
            },
            "CopyAutoTestData": {
                "type": "object",
                "properties": {
                    "assignment_id": {
                        "type": "integer",
                        "description": "The id of the assignment into which you want to copy this AutoTest."
                    }
                },
                "required": [
                    "assignment_id"
                ]
            },
            "JsonCreateAutoTest": {
                "type": "object",
                "properties": {
                    "setup_script": {
                        "type": "string",
                        "description": "The new setup script (per student) of the auto test."
                    },
                    "run_setup_script": {
                        "type": "string",
                        "description": "The new run setup script (global) of the auto test."
                    },
                    "has_new_fixtures": {
                        "type": "boolean",
                        "description": "If true all other files in the request will be used as new fixtures"
                    },
                    "enable_caching": {
                        "type": "boolean",
                        "description": "If true the output of the global setup script will be cached"
                    },
                    "grade_calculation": {
                        "type": "string",
                        "description": "The way to do grade calculation for this AutoTest."
                    },
                    "results_always_visible": {
                        "type": "boolean",
                        "nullable": true,
                        "description": "Should results be visible for students before the assignment is set to \"done\"?"
                    },
                    "prefer_teacher_revision": {
                        "type": "boolean",
                        "nullable": true,
                        "description": "If `true` we will use the teacher revision if available when running tests."
                    },
                    "fixtures": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FixtureLike"
                        },
                        "description": "A list of old fixtures you want to keep"
                    },
                    "overwrite_duplicate_fixtures": {
                        "type": "boolean",
                        "description": "If true existing fixtures with the same name as one of the new fixtures are deleted and no renaming is performed.",
                        "default": false
                    },
                    "assignment_id": {
                        "type": "integer",
                        "description": "The id of the assignment in which you want to create this AutoTest. This assignment should have a rubric."
                    }
                },
                "required": [
                    "assignment_id"
                ]
            },
            "CreateAutoTestData": {
                "type": "object",
                "properties": {
                    "json": {
                        "$ref": "#/components/schemas/JsonCreateAutoTest"
                    },
                    "fixture": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "binary"
                        }
                    }
                },
                "required": [
                    "json"
                ]
            },
            "FinalizedLTI1p3Provider": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BaseLTI1p3Provider"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "finalized": {
                                "type": "string",
                                "enum": [
                                    true
                                ],
                                "description": "This is a finalized provider."
                            }
                        },
                        "required": [
                            "finalized"
                        ]
                    }
                ],
                "description": "A finalized LTI 1.3 provider as JSON."
            },
            "NonFinalizedLTI1p3Provider": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BaseLTI1p3Provider"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "finalized": {
                                "type": "string",
                                "enum": [
                                    false
                                ],
                                "description": "This is a non finalized provider."
                            },
                            "auth_login_url": {
                                "type": "string",
                                "nullable": true,
                                "description": "The auth login url, if already configured."
                            },
                            "auth_token_url": {
                                "type": "string",
                                "nullable": true,
                                "description": "The auth token url, if already configured."
                            },
                            "client_id": {
                                "type": "string",
                                "nullable": true,
                                "description": "The client id, if already configured."
                            },
                            "key_set_url": {
                                "type": "string",
                                "nullable": true,
                                "description": "The url where we can download the keyset of the LMS, if already configured."
                            },
                            "auth_audience": {
                                "type": "string",
                                "nullable": true,
                                "description": "The auth audience, if already configured."
                            },
                            "custom_fields": {
                                "type": "object",
                                "additionalProperties": {
                                    "type": "string"
                                },
                                "description": "Custom fields that the LMS should provide when launching."
                            },
                            "public_jwk": {
                                "type": "object",
                                "additionalProperties": {
                                    "type": "string"
                                },
                                "description": "The public JWK for this provider, this should be provided to the LMS."
                            },
                            "public_key": {
                                "type": "string",
                                "description": "The public key for this provider, this should be provided to the LMS."
                            },
                            "edit_secret": {
                                "type": "string",
                                "format": "uuid",
                                "nullable": true,
                                "description": "If you have the permission to edit this provider this will be a key with which you can do that."
                            }
                        },
                        "required": [
                            "finalized",
                            "auth_login_url",
                            "auth_token_url",
                            "client_id",
                            "key_set_url",
                            "auth_audience",
                            "custom_fields",
                            "public_jwk",
                            "public_key",
                            "edit_secret"
                        ]
                    }
                ],
                "description": "A non finalized LTI 1.3 provider as JSON."
            },
            "FinalizedLTI1p1Provider": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BaseLTI1p1Provider"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "finalized": {
                                "type": "string",
                                "enum": [
                                    true
                                ],
                                "description": "This is a already finalized provider and thus is actively being used."
                            }
                        },
                        "required": [
                            "finalized"
                        ]
                    }
                ],
                "description": "The JSON representation of a finalized provider."
            },
            "NonFinalizedLTI1p1Provider": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BaseLTI1p1Provider"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "finalized": {
                                "type": "string",
                                "enum": [
                                    false
                                ],
                                "description": "This is a non finalized provider, so it cannot yet be used for launches."
                            },
                            "edit_secret": {
                                "type": "string",
                                "format": "uuid",
                                "nullable": true,
                                "description": "If you have the permission to edit this provider this will be a key with which you can do that."
                            },
                            "lms_consumer_key": {
                                "type": "string",
                                "description": "The consumer key used to connect the provider to an LMS."
                            },
                            "lms_consumer_secret": {
                                "type": "string",
                                "description": "The shared secret used to connect the provider to an LMS."
                            }
                        },
                        "required": [
                            "finalized",
                            "edit_secret",
                            "lms_consumer_key",
                            "lms_consumer_secret"
                        ]
                    }
                ],
                "description": "The JSON representation of a non finalized provider."
            },
            "CreateLTIData": {
                "anyOf": [
                    {
                        "type": "object",
                        "properties": {
                            "tenant_id": {
                                "type": "string",
                                "format": "uuid",
                                "description": "The id of the tenant that will use this LMS"
                            },
                            "lms": {
                                "type": "string",
                                "enum": [
                                    "Canvas",
                                    "Blackboard",
                                    "Sakai",
                                    "Open edX",
                                    "Moodle",
                                    "BrightSpace",
                                    "Populi"
                                ],
                                "description": "The LMS that will be used for this connection"
                            },
                            "lti_version": {
                                "type": "string",
                                "enum": [
                                    "lti1.1"
                                ],
                                "description": "Use LTI 1.1"
                            }
                        },
                        "required": [
                            "tenant_id",
                            "lms",
                            "lti_version"
                        ]
                    },
                    {
                        "type": "object",
                        "properties": {
                            "tenant_id": {
                                "type": "string",
                                "format": "uuid",
                                "description": "The id of the tenant that will use this LMS"
                            },
                            "iss": {
                                "type": "string",
                                "description": "The iss of the new provider"
                            },
                            "lms": {
                                "type": "string",
                                "enum": [
                                    "Canvas",
                                    "Blackboard",
                                    "Moodle",
                                    "Brightspace"
                                ],
                                "description": "The LMS that will be used for this connection"
                            },
                            "lti_version": {
                                "type": "string",
                                "enum": [
                                    "lti1.3"
                                ],
                                "description": "Use LTI 1.3",
                                "default": "lti1.3"
                            }
                        },
                        "required": [
                            "tenant_id",
                            "iss",
                            "lms"
                        ]
                    }
                ]
            },
            "TenantCourseStatistics": {
                "type": "object",
                "properties": {
                    "total": {
                        "type": "integer",
                        "description": "The total amount of courses of this tenant."
                    },
                    "active": {
                        "type": "integer",
                        "description": "The amount of \"active\" courses this tenant has. An active course is a course in which a student has created a submission within the last 31 days."
                    }
                },
                "required": [
                    "total",
                    "active"
                ],
                "description": "Information about the amount of courses a tenant has.",
                "x-use-camelcase": true
            },
            "Tenant": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "The id of the tenant"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the tenant"
                    },
                    "sso_provider_id": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true,
                        "description": "Maybe the id of the SSO provider connected to this tenant."
                    },
                    "statistics": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/TenantStatistics"
                            }
                        ],
                        "nullable": true,
                        "description": "Maybe the statistics of this tenant, if requested and if you have the permission to see it."
                    },
                    "abbreviated_name": {
                        "type": "string",
                        "nullable": true,
                        "description": "The short name (or names) of the tenant. This is used to make searching for tenants by end users easier."
                    },
                    "order_category": {
                        "type": "integer",
                        "description": "This value determines how the tenant should be ordered. Tenants should first be ordered from highest `order_category` to lowest, and then by name."
                    }
                },
                "required": [
                    "id",
                    "name",
                    "sso_provider_id",
                    "statistics",
                    "abbreviated_name",
                    "order_category"
                ],
                "description": "The JSON representation of a tenant.",
                "x-use-camelcase": true
            },
            "JsonCreateTenant": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the new tenant"
                    },
                    "abbreviated_name": {
                        "type": "string",
                        "description": "The abbreviated name of this tenant, useful for searching."
                    }
                },
                "required": [
                    "name",
                    "abbreviated_name"
                ]
            },
            "CreateTenantData": {
                "type": "object",
                "properties": {
                    "json": {
                        "$ref": "#/components/schemas/JsonCreateTenant"
                    },
                    "logo-default": {
                        "type": "string",
                        "format": "binary"
                    },
                    "logo-dark": {
                        "type": "string",
                        "format": "binary"
                    }
                },
                "required": [
                    "json"
                ]
            },
            "Course": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "The id of this course"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of this course"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The date this course was created"
                    },
                    "virtual": {
                        "type": "boolean",
                        "description": "Is this a virtual course."
                    },
                    "lti_provider": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/FinalizedLTI1p3Provider"
                            },
                            {
                                "$ref": "#/components/schemas/NonFinalizedLTI1p3Provider"
                            },
                            {
                                "$ref": "#/components/schemas/FinalizedLTI1p1Provider"
                            },
                            {
                                "$ref": "#/components/schemas/NonFinalizedLTI1p1Provider"
                            }
                        ],
                        "nullable": true,
                        "description": "The lti provider that manages this course, if `null` this is not a LTI course."
                    },
                    "state": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/CourseState"
                            }
                        ],
                        "description": "The state this course is in."
                    },
                    "tenant_id": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true,
                        "description": "The id of the tenant that owns this course."
                    },
                    "copy_lock_date": {
                        "type": "boolean",
                        "description": "Is the lock date feature enabled for this course. This will be `True` for every course created after the release of version N.2."
                    }
                },
                "required": [
                    "id",
                    "name",
                    "created_at",
                    "virtual",
                    "lti_provider",
                    "state",
                    "tenant_id",
                    "copy_lock_date"
                ],
                "description": "The way this class will be represented in JSON.",
                "x-use-camelcase": true
            },
            "AbstractRole": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "The id of the role"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the role"
                    }
                },
                "required": [
                    "id",
                    "name"
                ],
                "description": "The JSON representation of a role.",
                "x-use-camelcase": true
            },
            "CourseRegistrationLink": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "The id of this link"
                    },
                    "expiration_date": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The moment this link will stop working"
                    },
                    "role": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/CourseRole"
                            }
                        ],
                        "description": "The role new users will get"
                    },
                    "allow_register": {
                        "type": "boolean",
                        "description": "Can users register with this link"
                    }
                },
                "required": [
                    "id",
                    "expiration_date",
                    "role",
                    "allow_register"
                ],
                "description": "The JSON representation of a course registration link.",
                "x-use-camelcase": true
            },
            "PutEnrollLinkCourseData": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "The id of the link to edit, omit to create a new link."
                    },
                    "role_id": {
                        "type": "integer",
                        "description": "The id of the role that users should get when enrolling with this link."
                    },
                    "expiration_date": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The date this link should stop working."
                    },
                    "allow_register": {
                        "type": "boolean",
                        "description": "Should students be allowed to register a new account using this link. For registration to actually work this feature should be enabled."
                    }
                },
                "required": [
                    "role_id",
                    "expiration_date"
                ]
            },
            "CourseRole": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/AbstractRole"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "course": {
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/Course"
                                    }
                                ],
                                "description": "The course this role is connected to"
                            },
                            "hidden": {
                                "type": "boolean",
                                "description": "Is this role hidden"
                            }
                        },
                        "required": [
                            "course",
                            "hidden"
                        ]
                    }
                ],
                "description": "The JSON representation of a course role."
            },
            "AssignmentGrader": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "The id of the grader."
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the grader"
                    },
                    "weight": {
                        "type": "number",
                        "description": "The division weight of the grader, if no division is setup this will be 0."
                    },
                    "done": {
                        "type": "boolean",
                        "description": "Did this grader indicate that grading has finished? NOTE: This field will be removed or changed in a future release."
                    }
                },
                "required": [
                    "id",
                    "name",
                    "weight",
                    "done"
                ],
                "description": "A grader for an assignment.",
                "x-use-camelcase": true
            },
            "RubricItem": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BaseRubricItem"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer",
                                "description": "The id of this rubric item."
                            }
                        },
                        "required": [
                            "id"
                        ]
                    }
                ],
                "description": "The JSON representation of a rubric item."
            },
            "WorkRubricItem": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/RubricItem"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "multiplier": {
                                "type": "number",
                                "description": "The multiplier of this rubric item. This is especially useful for continuous rows, if a user achieved 50% of the points this will 0.5 for that rubric row."
                            },
                            "achieved_points": {
                                "type": "number",
                                "description": "The amount of achieved points in this rubric item. This is simply the `points` field multiplied by the `multiplier` field."
                            }
                        },
                        "required": [
                            "multiplier",
                            "achieved_points"
                        ]
                    }
                ],
                "description": "The connection between a submission and a rubric item."
            },
            "Work.RubricResultPointsAsJSON": {
                "type": "object",
                "properties": {
                    "max": {
                        "type": "number",
                        "nullable": true,
                        "description": "The maximal amount of points for this rubric, or None if logged in user doesn't have permission to see the rubric."
                    },
                    "selected": {
                        "type": "number",
                        "nullable": true,
                        "description": "The amount of point that is selected for this work, or None if the logged in user doesn't have permission to see the rubric."
                    }
                },
                "required": [
                    "max",
                    "selected"
                ],
                "description": "Information about the rubric points of a single submission.",
                "x-use-camelcase": true
            },
            "WorkOrigin": {
                "type": "string",
                "enum": [
                    "uploaded_files",
                    "github",
                    "gitlab"
                ],
                "description": "What is the way the work was handed in."
            },
            "Work": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "The id of the submission"
                    },
                    "user": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/User"
                            }
                        ],
                        "description": "The author of the submission. If submission was created by a group this will be the virtual user of the group."
                    },
                    "origin": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/WorkOrigin"
                            }
                        ],
                        "description": "The way this submission was created."
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The moment the submission was created."
                    },
                    "grade": {
                        "type": "number",
                        "nullable": true,
                        "description": "The grade of the submission, or `None` if the submission hasn't been graded of you cannot see the grade."
                    },
                    "assignee": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/User"
                            }
                        ],
                        "nullable": true,
                        "description": "The user assigned to this submission. Or `None` if not assigned or if you may not see the assignee."
                    },
                    "grade_overridden": {
                        "type": "boolean",
                        "description": "Does this submission have a rubric grade which has been overridden."
                    },
                    "extra_info": {
                        "description": "Some extra info that might be available. Currently only used for git submissions."
                    }
                },
                "required": [
                    "id",
                    "user",
                    "origin",
                    "created_at",
                    "grade",
                    "assignee",
                    "grade_overridden",
                    "extra_info"
                ],
                "description": "A submission in CodeGrade.",
                "x-use-camelcase": true
            },
            "AssignmentFeedback": {
                "type": "object",
                "properties": {
                    "general": {
                        "type": "string",
                        "description": "The general feedback of the submission."
                    },
                    "user": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The inline comments as a list of strings."
                    },
                    "linter": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The linter comments as a list of strings."
                    }
                },
                "required": [
                    "general",
                    "user",
                    "linter"
                ],
                "description": "The feedback of a single submission when getting all feedback through the `/assignments/{assignmentId}/feedbacks/` route.",
                "x-use-camelcase": true
            },
            "AutoTestFixture": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/FileMixin"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "hidden": {
                                "type": "boolean",
                                "description": "Is this fixture hidden."
                            }
                        },
                        "required": [
                            "hidden"
                        ]
                    }
                ],
                "description": "The fixture as JSON."
            },
            "AutoTestRun": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "The id of this run."
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The moment the run was created."
                    },
                    "state": {
                        "type": "string",
                        "enum": [
                            "running"
                        ],
                        "deprecated": true,
                        "description": "The state it is in. This is only kept for backwards compatibility reasons, it will always be \"running\"."
                    },
                    "is_continuous": {
                        "type": "string",
                        "enum": [
                            false
                        ],
                        "deprecated": true,
                        "description": "Also not used anymore, will always be `false`."
                    }
                },
                "required": [
                    "id",
                    "created_at",
                    "state",
                    "is_continuous"
                ],
                "description": "The run as JSON.",
                "x-use-camelcase": true
            },
            "ResultDataGetAutoTestGet": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "This id of this AutoTest"
                    },
                    "fixtures": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AutoTestFixture"
                        },
                        "description": "The fixtures connected to this AutoTest"
                    },
                    "run_setup_script": {
                        "type": "string",
                        "description": "The setup script that will be executed before any test starts."
                    },
                    "setup_script": {
                        "type": "string",
                        "description": "The setup script that will be executed for each student. In this script the submission of the student is available."
                    },
                    "finalize_script": {
                        "type": "string",
                        "description": "Unused"
                    },
                    "grade_calculation": {
                        "type": "string",
                        "nullable": true,
                        "description": "The way the grade is calculated in this AutoTest. This is `null` if the options is still unset. This can be 'full' or 'partial'."
                    },
                    "sets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AutoTestSet"
                        },
                        "description": "The sets in this AutoTest. In the UI these are called levels."
                    },
                    "assignment_id": {
                        "type": "integer",
                        "description": "The id of the assignment to which this AutoTest belongs."
                    },
                    "runs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ExtendedAutoTestRun"
                        },
                        "description": "The runs done with this AutoTest. This is list is always of length 0 or 1"
                    },
                    "results_always_visible": {
                        "type": "boolean",
                        "nullable": true,
                        "description": "If `true` This is `null` if the options is still unset."
                    },
                    "prefer_teacher_revision": {
                        "type": "boolean",
                        "nullable": true,
                        "description": "If `true` This is `null` if the options is still unset."
                    },
                    "enable_caching": {
                        "type": "boolean",
                        "description": "If `true` the output of the global setup script wil be cached."
                    }
                },
                "required": [
                    "id",
                    "fixtures",
                    "run_setup_script",
                    "setup_script",
                    "finalize_script",
                    "grade_calculation",
                    "sets",
                    "assignment_id",
                    "runs",
                    "results_always_visible",
                    "prefer_teacher_revision",
                    "enable_caching"
                ],
                "description": "An AutoTest as JSON.",
                "x-use-camelcase": true
            },
            "AutoTestResultState": {
                "type": "string",
                "enum": [
                    "not_started",
                    "setting_up",
                    "running_setup",
                    "running",
                    "passed",
                    "failed",
                    "timed_out",
                    "skipped"
                ],
                "description": "This enum represents the states the result of a step can be in.\n\nA single step result will probably be in multiple states during its existence."
            },
            "AutoTestStepBase": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BaseAutoTestStepBase"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer",
                                "description": "The id of this step"
                            },
                            "description": {
                                "type": "string",
                                "nullable": true,
                                "description": "Description template for this step that is shown to students."
                            }
                        },
                        "required": [
                            "id",
                            "description"
                        ]
                    }
                ],
                "description": "The step as JSON."
            },
            "AutoTestStepResultState": {
                "type": "string",
                "enum": [
                    "not_started",
                    "running",
                    "passed",
                    "failed",
                    "timed_out",
                    "skipped"
                ],
                "description": "This enum represents the states the result of a step can be in.\n\nA single step result will probably be in multiple states during its existence."
            },
            "IOTestStepLogBase": {
                "type": "object",
                "properties": {
                    "state": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/AutoTestStepResultState"
                            }
                        ],
                        "description": "The state of this step."
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The moment the step result was created."
                    }
                },
                "required": [
                    "state",
                    "created_at"
                ],
                "description": "The base data for a single IO test step.",
                "x-use-camelcase": true
            },
            "IOTestStepLog": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/IOTestStepLogBase"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "stdout": {
                                "type": "string",
                                "description": "The stdout produced by this step."
                            },
                            "stderr": {
                                "type": "string",
                                "description": "The stderr produced by this step."
                            },
                            "exit_code": {
                                "type": "integer",
                                "description": "The exit code of the step"
                            },
                            "time_spend": {
                                "type": "number",
                                "format": "time-delta",
                                "description": "The time spend while running the step"
                            },
                            "started_at": {
                                "type": "string",
                                "format": "date-time",
                                "nullable": true,
                                "description": "The moment the step was started, if it has already been started."
                            },
                            "achieved_points": {
                                "type": "number",
                                "description": "The amount of points achieved in this step."
                            }
                        }
                    }
                ],
                "description": "The data for a single IO test step."
            },
            "IOTestLog": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/AutoTestStepLogBase"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "steps": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/IOTestStepLog"
                                },
                                "description": "The log for each step of the io test."
                            }
                        },
                        "required": [
                            "steps"
                        ]
                    }
                ],
                "description": "The log type of an IO test."
            },
            "RunProgramLog": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/AutoTestStepLogBase"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "stdout": {
                                "type": "string",
                                "description": "The stdout produced by the step."
                            },
                            "stderr": {
                                "type": "string",
                                "description": "The stderr produced by the step."
                            },
                            "exit_code": {
                                "type": "integer",
                                "description": "The exit code of the step."
                            },
                            "time_spend": {
                                "type": "number",
                                "format": "time-delta",
                                "description": "The time spend running the step."
                            }
                        },
                        "required": [
                            "stdout",
                            "stderr",
                            "exit_code",
                            "time_spend"
                        ]
                    }
                ],
                "description": "The result of a RunProgram step."
            },
            "CustomOutputLogBase": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/AutoTestStepLogBase"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "stdout": {
                                "type": "string",
                                "description": "The stdout produced by the step."
                            },
                            "stderr": {
                                "type": "string",
                                "description": "The stderr produced by the step."
                            },
                            "exit_code": {
                                "type": "integer",
                                "description": "The exit code of the step."
                            },
                            "time_spend": {
                                "type": "number",
                                "format": "time-delta",
                                "description": "The time spend running the step."
                            }
                        },
                        "required": [
                            "stdout",
                            "stderr",
                            "exit_code",
                            "time_spend"
                        ]
                    }
                ],
                "description": "The log of the custom output step type."
            },
            "CustomOutputLog": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/CustomOutputLogBase"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "points": {
                                "type": "number",
                                "description": "The amount of points achieved for the step."
                            },
                            "haystack": {
                                "type": "string",
                                "description": "The part of the stdout that was used to find the amount of points."
                            }
                        }
                    }
                ],
                "description": "The extra fields, only present when a step has not timed-out."
            },
            "JunitTestLogBase": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/AutoTestStepLogBase"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "stdout": {
                                "type": "string",
                                "description": "The stdout produced by the step."
                            },
                            "stderr": {
                                "type": "string",
                                "description": "The stderr produced by the step."
                            },
                            "exit_code": {
                                "type": "integer",
                                "description": "The exit code of the step."
                            },
                            "time_spend": {
                                "type": "number",
                                "format": "time-delta",
                                "description": "The time spend running the step."
                            }
                        },
                        "required": [
                            "stdout",
                            "stderr",
                            "exit_code",
                            "time_spend"
                        ]
                    }
                ],
                "description": "The log for the JUnit step type."
            },
            "JunitTestLog": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/JunitTestLogBase"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "points": {
                                "type": "number",
                                "description": "The amount of success full tests divided by the total amount of tests."
                            }
                        }
                    }
                ],
                "description": "The extra fields, only present when the step has not timed-out."
            },
            "QualityTestLogBase": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/AutoTestStepLogBase"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "stdout": {
                                "type": "string",
                                "description": "The stdout produced by the step."
                            },
                            "stderr": {
                                "type": "string",
                                "description": "The stderr produced by the step."
                            },
                            "exit_code": {
                                "type": "integer",
                                "description": "The exit code of the step."
                            },
                            "time_spend": {
                                "type": "number",
                                "format": "time-delta",
                                "description": "The time spend running the step."
                            }
                        },
                        "required": [
                            "stdout",
                            "stderr",
                            "exit_code",
                            "time_spend"
                        ]
                    }
                ],
                "description": "The log for the QualityTest step type."
            },
            "QualityTestLog": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/QualityTestLogBase"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "points": {
                                "type": "number",
                                "description": "Should not be used."
                            }
                        }
                    }
                ],
                "description": "The full log for the QualityTest step type."
            },
            "AutoTestStepLogBase": {
                "type": "object",
                "properties": {},
                "description": "The base AutoTestStep log for every step type.\n\nThis is also the type of the log when the test hasn't been started yet.",
                "x-use-camelcase": true
            },
            "AutoTestStepResult": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "The id of the result of a step"
                    },
                    "auto_test_step": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/AutoTestStepBase"
                            }
                        ],
                        "description": "The step this is the result of."
                    },
                    "state": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/AutoTestStepResultState"
                            }
                        ],
                        "description": "The state this result is in."
                    },
                    "achieved_points": {
                        "type": "number",
                        "description": "The amount of points achieved by the student in this step."
                    },
                    "log": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/IOTestLog"
                            },
                            {
                                "$ref": "#/components/schemas/RunProgramLog"
                            },
                            {
                                "$ref": "#/components/schemas/CustomOutputLog"
                            },
                            {
                                "$ref": "#/components/schemas/JunitTestLog"
                            },
                            {
                                "$ref": "#/components/schemas/QualityTestLog"
                            },
                            {
                                "$ref": "#/components/schemas/AutoTestStepLogBase"
                            }
                        ],
                        "nullable": true,
                        "description": "The log produced by this result. The format of this log depends on the step result."
                    },
                    "started_at": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "description": "The time this result was started, if `null` the result hasn't started yet."
                    },
                    "attachment_id": {
                        "type": "string",
                        "nullable": true,
                        "description": "The id of the attachment produced by this result. If `null` no attachment was produced."
                    }
                },
                "required": [
                    "id",
                    "auto_test_step",
                    "state",
                    "achieved_points",
                    "log",
                    "started_at",
                    "attachment_id"
                ],
                "description": "The step result as JSON.",
                "x-use-camelcase": true
            },
            "BaseFile": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of the file, this can be used to retrieve it later on."
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the file, this does not include the name of any parents."
                    }
                },
                "required": [
                    "id",
                    "name"
                ],
                "description": "The base type for any file that CodeGrade sends.",
                "x-use-camelcase": true
            },
            "FileTree": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BaseFile"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "entries": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/FileTree"
                                },
                                "description": "The entries in this directory. This is a list that will contain all children of the directory. This key might not be present, in which case the file is not a directory."
                            }
                        }
                    }
                ],
                "description": "The FileTree represented as JSON."
            },
            "QualityCommentSeverity": {
                "type": "string",
                "enum": [
                    "info",
                    "warning",
                    "error",
                    "fatal"
                ],
                "description": "The severity of a comment."
            },
            "LineRange": {
                "type": "object",
                "properties": {
                    "start": {
                        "type": "integer",
                        "description": "The line the comment starts (inclusive), one indexed."
                    },
                    "end": {
                        "type": "integer",
                        "description": "The line the comment ends (inclusive), one indexed."
                    }
                },
                "required": [
                    "start",
                    "end"
                ],
                "description": "A line range.",
                "x-use-camelcase": true
            },
            "ColumnRange": {
                "type": "object",
                "properties": {
                    "start": {
                        "type": "integer",
                        "description": "The column the comment starts (inclusive), one indexed."
                    },
                    "end": {
                        "type": "integer",
                        "nullable": true,
                        "description": "The column the comment ends (inclusive), one indexed. If it is `null` the comments spans till the end of the line."
                    }
                },
                "required": [
                    "start",
                    "end"
                ],
                "description": "A column range.",
                "x-use-camelcase": true
            },
            "BaseAutoTestQualityComment": {
                "type": "object",
                "properties": {
                    "severity": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/QualityCommentSeverity"
                            }
                        ],
                        "description": "The severity of the comment. This determines how much points will be deducted."
                    },
                    "code": {
                        "type": "string",
                        "nullable": true,
                        "description": "The error code from the linter."
                    },
                    "origin": {
                        "type": "string",
                        "description": "The name of the linter that created this comment."
                    },
                    "msg": {
                        "type": "string",
                        "description": "The message of this comment."
                    },
                    "line": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/LineRange"
                            }
                        ],
                        "description": "The lines to which this comment applies."
                    },
                    "column": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/ColumnRange"
                            }
                        ],
                        "description": "The columns to which this comment applies."
                    }
                },
                "required": [
                    "severity",
                    "code",
                    "origin",
                    "msg",
                    "line",
                    "column"
                ],
                "description": "The base of the json input/output.",
                "x-use-camelcase": true
            },
            "AutoTestQualityComment": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BaseAutoTestQualityComment"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "step_id": {
                                "type": "integer",
                                "description": "The id of the step to which this comment is connected."
                            },
                            "result_id": {
                                "type": "integer",
                                "description": "The id of the result to which this comment is connected."
                            },
                            "file_id": {
                                "type": "string",
                                "description": "The id of the file to which this comment is connected."
                            }
                        },
                        "required": [
                            "step_id",
                            "result_id",
                            "file_id"
                        ]
                    }
                ],
                "description": "The comment as JSON."
            },
            "AutoTestRunnerState": {
                "type": "string",
                "enum": [
                    "starting",
                    "waiting_for_image",
                    "running_setup",
                    "uploading_image",
                    "restoring_image",
                    "running",
                    "finished"
                ],
                "description": "The state of a runner."
            },
            "AutoTestRunner": {
                "type": "object",
                "properties": {
                    "state": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/AutoTestRunnerState"
                            }
                        ],
                        "description": "The current state of the runner"
                    }
                },
                "required": [
                    "state"
                ],
                "description": "A runner as JSON.",
                "x-use-camelcase": true
            },
            "AutoTestResult": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "The id of this result"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The time this result was created"
                    },
                    "started_at": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "description": "The moment this result was started. If this is `null` the result has not yet started."
                    },
                    "work_id": {
                        "type": "integer",
                        "description": "The id of the submission (work) that was tested in this result."
                    },
                    "state": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/AutoTestResultState"
                            }
                        ],
                        "description": "The state the result is in."
                    },
                    "points_achieved": {
                        "type": "number",
                        "description": "The amount of points achieved in this step by the student."
                    }
                },
                "required": [
                    "id",
                    "created_at",
                    "started_at",
                    "work_id",
                    "state",
                    "points_achieved"
                ],
                "description": "The JSON representation of a result.",
                "x-use-camelcase": true
            },
            "CommentReplyType": {
                "type": "string",
                "enum": [
                    "plain_text",
                    "markdown"
                ],
                "description": "The type of formatting used for the contents of the reply."
            },
            "CommentType": {
                "type": "string",
                "enum": [
                    "normal",
                    "peer_feedback"
                ],
                "description": "The kind of a reply."
            },
            "CommentReply": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "The id of the reply"
                    },
                    "comment": {
                        "type": "string",
                        "description": "The content of the reply, see `reply_type` to check in what kind of formatting this reply is."
                    },
                    "author_id": {
                        "type": "integer",
                        "nullable": true,
                        "description": "The id of the author of this reply, this will be `null` if no author is known (for legacy replies), or if you do not have the permission to see the author."
                    },
                    "in_reply_to_id": {
                        "type": "integer",
                        "nullable": true,
                        "description": "If this reply was a reply to a specific `CommentReply`, this field will be the id of this `CommentReply` Otherwise this will be `null`."
                    },
                    "last_edit": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "description": "The date the last edit was made to this reply, this will be `null` if you do not have the permission to see this information."
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The date this reply was created."
                    },
                    "reply_type": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/CommentReplyType"
                            }
                        ],
                        "description": "The formatting that the content of this reply is in."
                    },
                    "comment_type": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/CommentType"
                            }
                        ],
                        "description": "The type of comment this is."
                    },
                    "approved": {
                        "type": "boolean",
                        "description": "Is this comment approved (i.e. visible for the author of the submission in most cases) or not."
                    },
                    "comment_base_id": {
                        "type": "integer",
                        "description": "The id of the `CommentBase` this reply is in."
                    }
                },
                "required": [
                    "id",
                    "comment",
                    "author_id",
                    "in_reply_to_id",
                    "last_edit",
                    "created_at",
                    "reply_type",
                    "comment_type",
                    "approved",
                    "comment_base_id"
                ],
                "description": "A reply on a comment thread.",
                "x-use-camelcase": true
            },
            "CourseSnippet": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "The id of this snippet."
                    },
                    "key": {
                        "type": "string",
                        "description": "The key of this snippet."
                    },
                    "value": {
                        "type": "string",
                        "description": "The value of this snippet, i.e. what this snippet should expand to."
                    }
                },
                "required": [
                    "id",
                    "key",
                    "value"
                ],
                "description": "The JSON representation of a course snippet.",
                "x-use-camelcase": true
            },
            "FeedbackWithoutReplies": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/FeedbackBase"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "user": {
                                "type": "object",
                                "additionalProperties": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                },
                                "description": "A mapping between file id and a mapping that is between line and feedback. So for example: `{5: {0: 'Nice job!'}}` means that file with `id` 5 has feedback on line 0."
                            },
                            "authors": {
                                "type": "object",
                                "additionalProperties": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "$ref": "#/components/schemas/User"
                                    }
                                },
                                "description": "The authors of the user feedback. In the example above the author of the feedback 'Nice job!' would be at `{5: {0: $USER}}`."
                            }
                        },
                        "required": [
                            "user",
                            "authors"
                        ]
                    }
                ],
                "description": "The JSON representation for feedback without replies.\n\nThis representation is considered deprecated, as it doesn't include important information (i.e. replies)"
            },
            "LinterComment": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "The code produced by the linter. The meaning depends on the linter used."
                    },
                    "line": {
                        "type": "integer",
                        "description": "The line the comment was placed on."
                    },
                    "msg": {
                        "type": "string",
                        "nullable": true,
                        "description": "The message of the comment."
                    }
                },
                "required": [
                    "code",
                    "line",
                    "msg"
                ],
                "description": "A old style linter comment.",
                "x-use-camelcase": true
            },
            "CommentBase": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "The id of the comment base."
                    },
                    "line": {
                        "type": "integer",
                        "description": "The line on which the comment was placed."
                    },
                    "file_id": {
                        "type": "string",
                        "description": "The id of the file on which this comment was placed."
                    },
                    "work_id": {
                        "type": "integer",
                        "description": "The id of the work that this comment was placed on. This work will always contain the file with `file_id`."
                    },
                    "replies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CommentReply"
                        },
                        "description": "The replies, that you are allowed to see, in this comment base."
                    }
                },
                "required": [
                    "id",
                    "line",
                    "file_id",
                    "work_id",
                    "replies"
                ],
                "description": "A comment thread, this contains many replies which contain the actual feedback.",
                "x-use-camelcase": true
            },
            "FeedbackBase": {
                "type": "object",
                "properties": {
                    "general": {
                        "type": "string",
                        "nullable": true,
                        "description": "The general feedback given on this submission."
                    },
                    "linter": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "array",
                                "items": {
                                    "type": "array",
                                    "items": {
                                        "anyOf": [
                                            {
                                                "type": "string"
                                            },
                                            {
                                                "$ref": "#/components/schemas/LinterComment"
                                            }
                                        ]
                                    },
                                    "minItems": 2,
                                    "maxItems": 2
                                }
                            }
                        },
                        "description": "A mapping that is almost the same the user feedback mapping for feedback without replies, only the final key is not a string but a list of tuples where the first item is the linter code and the second item is linter comments."
                    }
                },
                "required": [
                    "general",
                    "linter"
                ],
                "description": "The base JSON representation for feedback.",
                "x-use-camelcase": true
            },
            "FeedbackWithReplies": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/FeedbackBase"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "user": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/CommentBase"
                                },
                                "description": "A list of users that have given inline feedback on this submission."
                            },
                            "authors": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/User"
                                },
                                "description": "A list of all authors you have permission to see that placed comments. This list is unique, i.e. each author occurs at most once."
                            }
                        },
                        "required": [
                            "user",
                            "authors"
                        ]
                    }
                ],
                "description": "The JSON representation for feedback with replies."
            },
            "WebhookBase": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "The id of the webhook configuration."
                    },
                    "public_key": {
                        "type": "string",
                        "description": "The public key that we will use to clone the repository."
                    },
                    "assignment_id": {
                        "type": "integer",
                        "description": "The id of the assignment to which this config is connected."
                    },
                    "user_id": {
                        "type": "integer",
                        "description": "The user that owns this configuration. Submissions made by this config will have this user as author."
                    },
                    "secret": {
                        "type": "string",
                        "description": "The secret that should be passed in the webhook by the provider (e.g. GitHub)."
                    },
                    "default_branch": {
                        "type": "string",
                        "description": "The default branch configured by the teacher, currently not used."
                    }
                },
                "required": [
                    "id",
                    "public_key",
                    "assignment_id",
                    "user_id",
                    "secret",
                    "default_branch"
                ],
                "description": "The configuration for a webhook.",
                "x-use-camelcase": true
            },
            "GradeOrigin": {
                "type": "string",
                "enum": [
                    "human",
                    "auto_test"
                ],
                "description": "What is the origin of this grade history entry."
            },
            "GradeHistory": {
                "type": "object",
                "properties": {
                    "changed_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The moment the grade was changed."
                    },
                    "is_rubric": {
                        "type": "boolean",
                        "nullable": true,
                        "description": "Was this grade given by a rubric."
                    },
                    "grade": {
                        "type": "number",
                        "nullable": true,
                        "description": "What grade was given."
                    },
                    "passed_back": {
                        "type": "boolean",
                        "nullable": true,
                        "description": "Has this grade been passed back to the LMS?"
                    },
                    "origin": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/GradeOrigin"
                            }
                        ],
                        "description": "What as the origin of the grade."
                    },
                    "user": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/User"
                            }
                        ],
                        "nullable": true,
                        "description": "The user that gave the grade, only available when `grade_origin` is `human`."
                    }
                },
                "required": [
                    "changed_at",
                    "is_rubric",
                    "grade",
                    "passed_back",
                    "origin",
                    "user"
                ],
                "description": "A history event for the grade of a submission.",
                "x-use-camelcase": true
            },
            "ExtendedGroup": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Group"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "virtual_user": {
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/UserWithoutGroup"
                                    }
                                ],
                                "description": "The virtual user connected to this course. It will not contain the `group` key as this would lead to an infinite recursion."
                            }
                        },
                        "required": [
                            "virtual_user"
                        ]
                    }
                ],
                "description": "The group as extended JSON."
            },
            "GroupSet": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "The id of this group set."
                    },
                    "minimum_size": {
                        "type": "integer",
                        "description": "The minimum size a group should be before it can submit work."
                    },
                    "maximum_size": {
                        "type": "integer",
                        "description": "The maximum size a group can be."
                    },
                    "assignment_ids": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "The ids of the assignments connected to this group set."
                    }
                },
                "required": [
                    "id",
                    "minimum_size",
                    "maximum_size",
                    "assignment_ids"
                ],
                "description": "The way this class will be represented in JSON.",
                "x-use-camelcase": true
            },
            "AssignmentLoginLink": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "The id of this link."
                    },
                    "assignment": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Assignment"
                            }
                        ],
                        "description": "The assignment connected to this login link."
                    },
                    "user": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/User"
                            }
                        ],
                        "description": "The user that is link will login."
                    },
                    "time_to_start": {
                        "type": "number",
                        "nullable": true,
                        "description": "The amount of seconds until the exam starts."
                    }
                },
                "required": [
                    "id",
                    "assignment",
                    "user",
                    "time_to_start"
                ],
                "description": "The way this class will be represented in JSON.",
                "x-use-camelcase": true
            },
            "NotificationSettingOption": {
                "type": "object",
                "properties": {
                    "reason": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/NotificationReasons"
                            }
                        ],
                        "description": "The notification reason."
                    },
                    "explanation": {
                        "type": "string",
                        "description": "The explanation when these kinds of notifications occur."
                    },
                    "value": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/EmailNotificationTypes"
                            }
                        ],
                        "description": "The current value for this notification reason."
                    }
                },
                "required": [
                    "reason",
                    "explanation",
                    "value"
                ],
                "description": "The JSON serialization schema for a single notification setting option.",
                "x-use-camelcase": true
            },
            "NotificationSetting": {
                "type": "object",
                "properties": {
                    "options": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/NotificationSettingOption"
                        },
                        "description": "The possible options to set."
                    },
                    "possible_values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/EmailNotificationTypes"
                        },
                        "description": "The possible values for each option."
                    }
                },
                "required": [
                    "options",
                    "possible_values"
                ],
                "description": "The notification preferences of a user.",
                "x-use-camelcase": true
            },
            "AssignmentPeerFeedbackConnection": {
                "type": "object",
                "properties": {
                    "subject": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/User"
                            }
                        ],
                        "description": "The user that should be given a review."
                    },
                    "peer": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/User"
                            }
                        ],
                        "description": "The user that should do the review."
                    }
                },
                "required": [
                    "subject",
                    "peer"
                ],
                "description": "A peer feedback connection that connects two students.",
                "x-use-camelcase": true
            },
            "PlagiarismState": {
                "type": "string",
                "enum": [
                    "starting",
                    "done",
                    "crashed",
                    "started",
                    "parsing",
                    "running",
                    "finalizing",
                    "comparing"
                ],
                "description": "Describes in what state a <span data-role=\"class\">.PlagiarismRun</span> is."
            },
            "PlagiarismRun.PlagiarismAssignmentAsJSON": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "The id of the assignment."
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the assignment"
                    },
                    "course_id": {
                        "type": "integer",
                        "description": "The id of the course the assignment is in."
                    }
                },
                "required": [
                    "id",
                    "name",
                    "course_id"
                ],
                "description": "This object represents an assignment that is connected to a plagiarism run or case.",
                "x-use-camelcase": true
            },
            "PlagiarismRun.PlagiarismCourseAsJSON": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "The id of the course"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the course."
                    },
                    "virtual": {
                        "type": "boolean",
                        "description": "Is this is a virtual course?"
                    }
                },
                "required": [
                    "id",
                    "name",
                    "virtual"
                ],
                "description": "This object represents an course that is connected to a plagiarism run or case.",
                "x-use-camelcase": true
            },
            "PlagiarismRun": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "The id of the run."
                    },
                    "state": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/PlagiarismState"
                            }
                        ],
                        "description": "The state this run is in."
                    },
                    "submissions_done": {
                        "type": "integer",
                        "nullable": true,
                        "description": "The amount of submissions that have finished the current state."
                    },
                    "submissions_total": {
                        "type": "integer",
                        "nullable": true,
                        "description": "The total amount of submissions connected to this run."
                    },
                    "provider_name": {
                        "type": "string",
                        "description": "Which provider is doing this run."
                    },
                    "config": {
                        "description": "The config used for this run."
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The time this run was created."
                    },
                    "assignment": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Assignment"
                            }
                        ],
                        "description": "The assignment this run was done on."
                    },
                    "log": {
                        "type": "string",
                        "nullable": true,
                        "description": "The log produced by the provider while running."
                    },
                    "assignments": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/components/schemas/PlagiarismRun.PlagiarismAssignmentAsJSON"
                        },
                        "description": "A mapping between assignment id and the assignment for each assignment that is connected to this run. These are not (!) full assignment objects, but only contain the `name` and `id`."
                    },
                    "courses": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/components/schemas/PlagiarismRun.PlagiarismCourseAsJSON"
                        },
                        "description": "The mapping between course id and the course for each course that is connected to this run. These are not (!) full course object, but contain only the `name`, `id` and if the course is virtual."
                    },
                    "cases_dropped": {
                        "type": "boolean",
                        "description": "If we found more matches than the maximum allowed (i.e. matches were dropped) this value is set to `True`."
                    }
                },
                "required": [
                    "id",
                    "state",
                    "submissions_done",
                    "submissions_total",
                    "provider_name",
                    "config",
                    "created_at",
                    "assignment",
                    "log",
                    "assignments",
                    "courses",
                    "cases_dropped"
                ],
                "description": "The way this class will be represented in JSON.",
                "x-use-camelcase": true
            },
            "CommentReplyEdit": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "The id of this edit."
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The moment this edit was created."
                    },
                    "editor": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/User"
                            }
                        ],
                        "description": "The users who edited the comment."
                    },
                    "old_text": {
                        "type": "string",
                        "description": "The text of the comment before the edit."
                    },
                    "new_text": {
                        "type": "string",
                        "nullable": true,
                        "description": "The new text after the edit. This will be `None` if this edit represents a deletion."
                    }
                },
                "required": [
                    "id",
                    "created_at",
                    "editor",
                    "old_text",
                    "new_text"
                ],
                "description": "This class represents an edit of a comment reply.",
                "x-use-camelcase": true
            },
            "Work.RubricResultAsJSON": {
                "type": "object",
                "properties": {
                    "rubrics": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RubricRowBase"
                        },
                        "description": "A list of rubric rows that make up the rubric of this assignment."
                    },
                    "selected": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/WorkRubricItem"
                        },
                        "description": "A list of all the selected rubric items for this work, or an empty list if the logged in user doesn't have permission to see the rubric."
                    },
                    "points": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Work.RubricResultPointsAsJSON"
                            }
                        ],
                        "description": "The points achieved by this submission and possible in this rubric."
                    }
                },
                "required": [
                    "rubrics",
                    "selected",
                    "points"
                ],
                "description": "The rubric result of a single submission.",
                "x-use-camelcase": true
            },
            "Snippet": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "The id of the snippet."
                    },
                    "key": {
                        "type": "string",
                        "description": "The key under which the snippet was saved."
                    },
                    "value": {
                        "type": "string",
                        "description": "The value of the snippet."
                    }
                },
                "required": [
                    "id",
                    "key",
                    "value"
                ],
                "description": "This class defines a personal snippet.",
                "x-use-camelcase": true
            },
            "TaskResultState": {
                "type": "string",
                "enum": [
                    "not_started",
                    "started",
                    "finished",
                    "failed",
                    "crashed",
                    "skipped",
                    "revoked"
                ],
                "description": "The result state of a job."
            },
            "ExtendedJob": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Job"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "The name of the job."
                            },
                            "kwargs": {
                                "type": "object",
                                "additionalProperties": {},
                                "description": "The kwargs given to the job."
                            },
                            "try_n": {
                                "type": "integer",
                                "description": "The current try of the job."
                            },
                            "eta": {
                                "type": "string",
                                "format": "date-time",
                                "description": "The time the job should be executed."
                            },
                            "traceback": {
                                "type": "string",
                                "nullable": true,
                                "description": "Possibly the traceback of the job. Only not `null` when the job failed."
                            }
                        },
                        "required": [
                            "name",
                            "kwargs",
                            "try_n",
                            "eta",
                            "traceback"
                        ]
                    }
                ],
                "description": "The extended JSON serialization of a job."
            },
            "ResultDataGetTask ResultGetAll": {
                "type": "object",
                "properties": {
                    "not_started": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ExtendedJob"
                        },
                        "description": "Jobs that have not yet started"
                    },
                    "active": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ExtendedJob"
                        },
                        "description": "Jobs that are currently running."
                    },
                    "finished": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ExtendedJob"
                        },
                        "description": "A part of the jobs that have finished."
                    },
                    "total_finished": {
                        "type": "integer",
                        "description": "The total amount of jobs that have finished."
                    }
                },
                "required": [
                    "not_started",
                    "active",
                    "finished",
                    "total_finished"
                ],
                "description": "The history of jobs for an instance.",
                "x-use-camelcase": true
            },
            "TenantStatistics": {
                "type": "object",
                "properties": {
                    "student_amounts": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "integer"
                        },
                        "description": "The amount of students. This will be a mapping from academic to the amount of students. The end year of the academic year is used, so the amount of students for 2020/2021 academic year can be found under the key `2021`."
                    },
                    "amount_submissions_last_week": {
                        "type": "integer",
                        "description": "The amount of submissions handed-in to courses of this tenant in the last week."
                    },
                    "course_amounts": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/TenantCourseStatistics"
                            }
                        ],
                        "description": "Information about the amount of courses."
                    }
                },
                "required": [
                    "student_amounts",
                    "amount_submissions_last_week",
                    "course_amounts"
                ],
                "description": "Various statistics that describe the tenant.",
                "x-use-camelcase": true
            },
            "RubricRowBase": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "The id of this row, used for updating"
                    },
                    "header": {
                        "type": "string",
                        "description": "The header of this row."
                    },
                    "description": {
                        "type": "string",
                        "nullable": true,
                        "description": "The description of this row."
                    },
                    "description_type": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/RubricDescriptionType"
                            }
                        ],
                        "description": "The type of descriptions in this row."
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RubricItem"
                        },
                        "description": "The item in this row. The length will always be 1 for continuous rubric rows."
                    },
                    "locked": {
                        "anyOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "$ref": "#/components/schemas/RubricLockReason"
                            }
                        ],
                        "nullable": false,
                        "description": "Is this row locked. If it is locked you cannot update it, nor can you manually select items in it."
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of rubric row."
                    }
                },
                "required": [
                    "id",
                    "header",
                    "description",
                    "description_type",
                    "items",
                    "locked",
                    "type"
                ],
                "description": "The JSON representation of a rubric row.",
                "x-use-camelcase": true
            },
            "CopyRubricAssignmentData": {
                "type": "object",
                "properties": {
                    "old_assignment_id": {
                        "type": "integer",
                        "description": "The id of the assignment from which you want to copy the rubric."
                    }
                },
                "required": [
                    "old_assignment_id"
                ]
            },
            "ResultDataPostUserLogin": {
                "type": "object",
                "properties": {
                    "user": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/ExtendedUser"
                            }
                        ],
                        "description": "The user that was logged in."
                    },
                    "access_token": {
                        "type": "string",
                        "description": "A JWT token that can be used to do authenticated requests."
                    }
                },
                "required": [
                    "user",
                    "access_token"
                ],
                "description": "When logging in this object will be given.",
                "x-use-camelcase": true
            },
            "LoginUserData": {
                "anyOf": [
                    {
                        "type": "object",
                        "properties": {
                            "username": {
                                "type": "string",
                                "description": "The username of the user."
                            },
                            "tenant_id": {
                                "type": "string",
                                "format": "uuid",
                                "description": "The id of the tenant of the user, this value will become required starting with release Nobel.2"
                            },
                            "password": {
                                "type": "string",
                                "format": "password",
                                "description": "Your password"
                            }
                        },
                        "required": [
                            "username",
                            "password"
                        ],
                        "description": "The data required when you want to login"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "username": {
                                "type": "string",
                                "description": "The username of the user."
                            },
                            "tenant_id": {
                                "type": "string",
                                "format": "uuid",
                                "description": "The id of the tenant of the user, this value will become required starting with release Nobel.2"
                            },
                            "own_password": {
                                "type": "string",
                                "format": "password",
                                "description": "Your own password"
                            }
                        },
                        "required": [
                            "username",
                            "own_password"
                        ],
                        "description": "The data required when you want to impersonate a user"
                    }
                ]
            },
            "ResultDataPostLogin LinkLogin": {
                "type": "object",
                "properties": {
                    "user": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/ExtendedUser"
                            }
                        ],
                        "description": "The user that was logged in."
                    },
                    "access_token": {
                        "type": "string",
                        "description": "A JWT token that can be used to do authenticated requests."
                    }
                },
                "required": [
                    "user",
                    "access_token"
                ],
                "description": "When logging in this object will be given.",
                "x-use-camelcase": true
            },
            "PatchSubmissionData": {
                "type": "object",
                "properties": {
                    "feedback": {
                        "type": "string",
                        "nullable": true,
                        "description": "General feedback on the submission."
                    },
                    "grade": {
                        "type": "number",
                        "nullable": true,
                        "description": "The grade of the submission."
                    }
                }
            },
            "ExtendedTenant": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Tenant"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "logo_default_url": {
                                "type": "string",
                                "description": "A url where you can download the default logo for this tenant. You don't need to be logged in to use this url."
                            },
                            "logo_dark_url": {
                                "type": "string",
                                "description": "A url where you can download the dark logo for this tenant. You don't need to be logged in to use this url."
                            }
                        },
                        "required": [
                            "logo_default_url",
                            "logo_dark_url"
                        ]
                    }
                ],
                "description": "The extended JSON representation of a tenant."
            },
            "PatchTenantData": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The new name of the tenant"
                    },
                    "abbreviated_name": {
                        "type": "string",
                        "description": "The new abbreviated name of the tenant"
                    },
                    "order_category": {
                        "type": "integer",
                        "description": "The new order category of the tenant"
                    }
                }
            },
            "ResultDataPostUserRegister": {
                "type": "object",
                "properties": {
                    "user": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/ExtendedUser"
                            }
                        ],
                        "description": "The user that was logged in."
                    },
                    "access_token": {
                        "type": "string",
                        "description": "A JWT token that can be used to do authenticated requests."
                    }
                },
                "required": [
                    "user",
                    "access_token"
                ],
                "description": "When logging in this object will be given.",
                "x-use-camelcase": true
            },
            "RegisterUserData": {
                "type": "object",
                "properties": {
                    "username": {
                        "type": "string",
                        "description": "Username to register."
                    },
                    "password": {
                        "type": "string",
                        "description": "Password of the new user."
                    },
                    "email": {
                        "type": "string",
                        "description": "Email address of the new user."
                    },
                    "name": {
                        "type": "string",
                        "description": "Full name of the new user."
                    },
                    "tenant_id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "Id of the tenant to register the new user with."
                    }
                },
                "required": [
                    "username",
                    "password",
                    "email",
                    "name",
                    "tenant_id"
                ]
            },
            "ExtendedAutoTestResult": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/AutoTestResult"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "global_setup_stdout": {
                                "type": "string",
                                "nullable": true,
                                "description": "The stdout produced in the student setup script."
                            },
                            "global_setup_stderr": {
                                "type": "string",
                                "nullable": true,
                                "description": "The stderr produced in the student setup script."
                            },
                            "setup_stdout": {
                                "type": "string",
                                "nullable": true,
                                "description": "The stdout produced in the student setup script."
                            },
                            "setup_stderr": {
                                "type": "string",
                                "nullable": true,
                                "description": "The stderr produced in the student setup script."
                            },
                            "step_results": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/AutoTestStepResult"
                                },
                                "description": "The results for each step in this AutoTest. The ordering of this list is arbitrary, and the results for entire suites and or sets might be missing."
                            },
                            "approx_waiting_before": {
                                "type": "integer",
                                "nullable": true,
                                "description": "If the result has not started this will contain the amount of students we expect we still need to run before this result is next. This might be incorrect and should only be used as a rough estimate."
                            },
                            "final_result": {
                                "type": "boolean",
                                "description": "If `true` this is the final result for the student, meaning that without teacher interaction (e.g. restarting the AutoTest) this result will not change and will be used as is to calculate the grade of the student. Reasons why this may not be the case include but are not limited to the test containing hidden steps that will only be run after the deadline."
                            },
                            "suite_files": {
                                "type": "object",
                                "additionalProperties": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/FileTree"
                                    }
                                },
                                "description": "A mapping between suite id and the files written to the AutoTest output folder in that suite."
                            },
                            "quality_comments": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/AutoTestQualityComment"
                                },
                                "description": "The quality comments produced by this AutoTest result."
                            },
                            "possible_runners": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/AutoTestRunner"
                                },
                                "nullable": true,
                                "description": "The runners that could be used to run this result. You can use this to provide better feedback about the state of a non started result. If the result is already started this will be `None`."
                            }
                        },
                        "required": [
                            "global_setup_stdout",
                            "global_setup_stderr",
                            "setup_stdout",
                            "setup_stderr",
                            "step_results",
                            "approx_waiting_before",
                            "final_result",
                            "suite_files",
                            "quality_comments",
                            "possible_runners"
                        ]
                    }
                ],
                "description": "The extended JSON representation of a result."
            },
            "ExtendedWork": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Work"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "comment": {
                                "type": "string",
                                "nullable": true,
                                "description": "The general feedback comment for this submission."
                            },
                            "comment_author": {
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/User"
                                    }
                                ],
                                "nullable": true,
                                "description": "The author of the general feedback comment."
                            },
                            "assignment_id": {
                                "type": "integer",
                                "description": "The assignment id of this submission."
                            },
                            "rubric_result": {
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/Work.RubricResultAsJSON"
                                    }
                                ],
                                "nullable": true,
                                "description": "The rubric result of this submission."
                            }
                        },
                        "required": [
                            "comment",
                            "comment_author",
                            "assignment_id",
                            "rubric_result"
                        ]
                    }
                ],
                "description": "A submission in CodeGrade with extended data.\n\nAll data that might be `None` in this class might be `None` because of missing data or missing permissions."
            },
            "_SubmissionRubricItemDataParser": {
                "type": "object",
                "properties": {
                    "row_id": {
                        "type": "integer",
                        "description": "The id of the row the item is in."
                    },
                    "item_id": {
                        "type": "integer",
                        "description": "The id of the item to select."
                    },
                    "multiplier": {
                        "type": "number",
                        "description": "The multiplier you want to use for this rubric item. This value defaults to 1.0, and can only be something other than 1.0 for rubric rows with type 'continuous'.",
                        "default": 1.0
                    }
                },
                "required": [
                    "row_id",
                    "item_id"
                ],
                "description": "A single rubric item to select."
            },
            "PatchRubricResultSubmissionData": {
                "anyOf": [
                    {
                        "type": "object",
                        "properties": {
                            "items": {
                                "type": "array",
                                "items": {
                                    "type": "integer"
                                },
                                "description": "An array of rubric ids to select. This format is deprecated."
                            }
                        },
                        "required": [
                            "items"
                        ]
                    },
                    {
                        "type": "object",
                        "properties": {
                            "items": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/_SubmissionRubricItemDataParser"
                                },
                                "description": "An array of rubric items to select."
                            }
                        },
                        "required": [
                            "items"
                        ]
                    }
                ]
            },
            "User": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/UserWithoutGroup"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "group": {
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/Group"
                                    }
                                ],
                                "nullable": true,
                                "description": "If this user is a wrapper user for a group this will contain this group, otherwise it will be `null`."
                            }
                        },
                        "required": [
                            "group"
                        ]
                    }
                ],
                "description": "The JSON representation of a user."
            },
            "ExtendedUser": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/User"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "email": {
                                "type": "string",
                                "description": "The email of the user. This will only be provided for the currently logged in user."
                            },
                            "hidden": {
                                "type": "boolean",
                                "description": "Can this user see hidden assignments at least in one course."
                            },
                            "permissions": {
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/GlobalPermMap"
                                    }
                                ],
                                "description": "The permissions of the user. This will only be present if requested."
                            }
                        },
                        "required": [
                            "email",
                            "hidden"
                        ]
                    }
                ],
                "description": "The extended JSON representation of a user."
            },
            "Job": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of the job. Can be used to revoke and/or restart it."
                    },
                    "state": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/TaskResultState"
                            }
                        ],
                        "description": "The state of the job."
                    },
                    "result": {
                        "nullable": true,
                        "description": "Possibly the result of the job."
                    }
                },
                "required": [
                    "id",
                    "state",
                    "result"
                ],
                "description": "A job as JSON.",
                "x-use-camelcase": true
            },
            "UserInput": {
                "type": "object",
                "properties": {
                    "username": {
                        "type": "string",
                        "description": "The username of the user."
                    },
                    "tenant_id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "The id of the tenant of the user, this value will become required starting with release Nobel.2"
                    }
                },
                "required": [
                    "username"
                ]
            },
            "EmailUsersCourseData": {
                "anyOf": [
                    {
                        "type": "object",
                        "properties": {
                            "subject": {
                                "type": "string",
                                "description": "The subject of the email"
                            },
                            "body": {
                                "type": "string",
                                "description": "The plain text body of the email"
                            },
                            "email_all_users": {
                                "type": "boolean",
                                "description": "Email all users of the course except those specified in `usernames` If `false` we will email only the users specified in `usernames`."
                            },
                            "usernames": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "description": "The usernames of the users to email (or not to email, depending on the value of `email_all_users`)."
                            }
                        },
                        "required": [
                            "subject",
                            "body",
                            "email_all_users",
                            "usernames"
                        ],
                        "description": "This format is deprecated and will be removed in Nobel.2"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "subject": {
                                "type": "string",
                                "description": "The subject of the email"
                            },
                            "body": {
                                "type": "string",
                                "description": "The plain text body of the email"
                            },
                            "email_all_users": {
                                "type": "boolean",
                                "description": "Email all users of the course except those specified in `usernames` If `false` we will email only the users specified in `usernames`."
                            },
                            "users": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/UserInput"
                                },
                                "description": "The usernames of the users to email (or not to email, depending on the value of `email_all_users`)."
                            }
                        },
                        "required": [
                            "subject",
                            "body",
                            "email_all_users",
                            "users"
                        ]
                    }
                ]
            },
            "UserCourse": {
                "type": "object",
                "properties": {
                    "User": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/User"
                            }
                        ],
                        "description": "The User that was added."
                    },
                    "CourseRole": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/CourseRole"
                            }
                        ],
                        "description": "The role that the user got."
                    }
                },
                "required": [
                    "User",
                    "CourseRole"
                ],
                "description": "The result returned when adding a user to a course.",
                "x-use-camelcase": true
            },
            "ChangeUserRoleCourseData": {
                "anyOf": [
                    {
                        "type": "object",
                        "properties": {
                            "role_id": {
                                "type": "integer",
                                "description": "The id of the new role the user."
                            },
                            "user_id": {
                                "type": "integer",
                                "description": "The id of the user of which you want to change the role."
                            }
                        },
                        "required": [
                            "role_id",
                            "user_id"
                        ],
                        "description": "Pass this data if you want to change the role of an existing member."
                    },
                    {
                        "type": "object",
                        "properties": {
                            "role_id": {
                                "type": "integer",
                                "description": "The id of the new role the user."
                            },
                            "username": {
                                "type": "string",
                                "description": "The username of the user."
                            },
                            "tenant_id": {
                                "type": "string",
                                "format": "uuid",
                                "description": "The id of the tenant of the user, this value will become required starting with release Nobel.2"
                            }
                        },
                        "required": [
                            "role_id",
                            "username"
                        ],
                        "description": "Pass this data if you want to enroll a new user"
                    }
                ]
            },
            "ExtendedAutoTestRun": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/AutoTestRun"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "results": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/AutoTestResult"
                                },
                                "description": "The results in this run. This will only contain the result for the latest submissions."
                            },
                            "setup_stdout": {
                                "type": "string",
                                "deprecated": true,
                                "description": "The stdout output of the `run_setup_script`. Deprecated, please use the value on a result."
                            },
                            "setup_stderr": {
                                "type": "string",
                                "deprecated": true,
                                "description": "The stderr output of the `run_setup_script`. Deprecated, please use the value on a result."
                            }
                        },
                        "required": [
                            "results",
                            "setup_stdout",
                            "setup_stderr"
                        ]
                    }
                ],
                "description": "The run as extended JSON."
            },
            "Assignment": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "The id of the assignment."
                    },
                    "state": {
                        "type": "string",
                        "description": "Current state of the assignment."
                    },
                    "description": {
                        "type": "string",
                        "nullable": true,
                        "description": "Description of the assignment."
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "When this assignment was created."
                    },
                    "deadline": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "description": "The deadline of the assignment. It is possible the assignment has no deadline yet, in which case it will be `None`."
                    },
                    "lock_date": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "description": "The moment this assignment locks, this can be seen as a form of second deadline."
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the assignment."
                    },
                    "is_lti": {
                        "type": "boolean",
                        "description": "Is this an LTI assignment."
                    },
                    "course_id": {
                        "type": "integer",
                        "description": "Course of this assignment."
                    },
                    "cgignore": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "$ref": "#/components/schemas/SubmissionValidator.InputData"
                            }
                        ],
                        "nullable": true,
                        "description": "The cginore."
                    },
                    "cgignore_version": {
                        "type": "string",
                        "nullable": true,
                        "description": "The version of the cignore file."
                    },
                    "available_at": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "description": "The time the assignment will become available (i.e. the state will switch from 'hidden' to 'open'). If the state is not 'hidden' this value has no meaning. If this value is not `None` you cannot change to state to 'hidden' or 'open'."
                    },
                    "send_login_links": {
                        "type": "boolean",
                        "description": "Should we send login links to all users before the `available_at` time."
                    },
                    "fixed_max_rubric_points": {
                        "type": "number",
                        "nullable": true,
                        "description": "The fixed value for the maximum that can be achieved in a rubric. This can be higher and lower than the actual max. Will be `None` if unset."
                    },
                    "max_grade": {
                        "type": "number",
                        "nullable": true,
                        "description": "The maximum grade you can get for this assignment. This is based around the idea that a 10 is a 'perfect' score. So if this value is 12 a user can score 2 additional bonus points. If this value is `None` it is unset and regarded as a 10."
                    },
                    "group_set": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/GroupSet"
                            }
                        ],
                        "nullable": true,
                        "description": "The group set of this assignment. This is `None` if this assignment is not a group assignment."
                    },
                    "auto_test_id": {
                        "type": "integer",
                        "nullable": true,
                        "description": "The id of the AutoTest configuration connected to this assignment. This will always be given if there is a configuration connected to this assignment, even if you do not have permission to see the configuration itself."
                    },
                    "files_upload_enabled": {
                        "type": "boolean",
                        "description": "Can you upload files to this assignment."
                    },
                    "webhook_upload_enabled": {
                        "type": "boolean",
                        "description": "Can you connect git to this assignment"
                    },
                    "max_submissions": {
                        "type": "integer",
                        "nullable": true,
                        "description": "The maximum amount of submission a student may create, inclusive. The value `null` indicates that there is no limit."
                    },
                    "cool_off_period": {
                        "type": "number",
                        "format": "time-delta",
                        "description": "The time period in which a person can submit at most `amount_in_cool_off_period` amount."
                    },
                    "amount_in_cool_off_period": {
                        "type": "integer",
                        "description": "The maximum amount of time a user can submit within `amount_in_cool_off_period`. This value is always \\>= 0, if this value is 0 a user can submit an unlimited amount of time."
                    },
                    "reminder_time": {
                        "type": "string",
                        "nullable": true,
                        "description": "The moment reminder emails will be sent. This will be `None` if you don't have the permission to see this or if it is unset."
                    },
                    "lms_name": {
                        "type": "string",
                        "nullable": true,
                        "description": "The LMS providing this LTI assignment."
                    },
                    "peer_feedback_settings": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/AssignmentPeerFeedbackSettings"
                            }
                        ],
                        "nullable": true,
                        "description": "The peer feedback settings for this assignment. If `null` this assignment is not a peer feedback assignment."
                    },
                    "done_type": {
                        "type": "string",
                        "nullable": true,
                        "description": "The kind of reminder that will be sent. If you don't have the permission to see this it will always be `null` If this is not set it will also be `null`."
                    },
                    "done_email": {
                        "type": "string",
                        "nullable": true,
                        "description": "The email where the done email will be sent to. This will be `null` if you do not have permission to see this information."
                    },
                    "division_parent_id": {
                        "type": "integer",
                        "nullable": true,
                        "description": "The assignment id of the assignment that determines the grader division of this assignment. This will be `null` if you do not have permissions to see this information, or if no such parent is set."
                    },
                    "analytics_workspace_ids": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "The ids of the analytics workspaces connected to this assignment. WARNING: This API is still in beta, and might change in the future."
                    },
                    "kind": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/AssignmentKind"
                            }
                        ],
                        "description": "What kind of assignment is this."
                    }
                },
                "required": [
                    "id",
                    "state",
                    "description",
                    "created_at",
                    "deadline",
                    "lock_date",
                    "name",
                    "is_lti",
                    "course_id",
                    "cgignore",
                    "cgignore_version",
                    "available_at",
                    "send_login_links",
                    "fixed_max_rubric_points",
                    "max_grade",
                    "group_set",
                    "auto_test_id",
                    "files_upload_enabled",
                    "webhook_upload_enabled",
                    "max_submissions",
                    "cool_off_period",
                    "amount_in_cool_off_period",
                    "reminder_time",
                    "lms_name",
                    "peer_feedback_settings",
                    "done_type",
                    "done_email",
                    "division_parent_id",
                    "analytics_workspace_ids",
                    "kind"
                ],
                "description": "The serialization of an assignment.\n\nSee the comments in the source code for the meaning of each field.",
                "x-use-camelcase": true
            },
            "AssignmentStateEnum": {
                "type": "string",
                "enum": [
                    "hidden",
                    "open",
                    "done"
                ],
                "description": "Describes in what state an <span data-role=\"class\">.Assignment</span> is."
            },
            "AssignmentKind": {
                "type": "string",
                "enum": [
                    "normal",
                    "exam"
                ],
                "description": "Describes in what state an <span data-role=\"class\">.Assignment</span> is."
            },
            "SubmissionValidator.InputData": {
                "type": "object",
                "properties": {
                    "policy": {
                        "type": "string",
                        "enum": [
                            "deny_all_files",
                            "allow_all_files"
                        ],
                        "description": "The default policy of this validator."
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FileRule.InputData"
                        },
                        "description": "The rules in this validator. If the policy is \"deny\\_all\\_files\" this should not be empty."
                    },
                    "options": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Options.InputData"
                        },
                        "description": "The options for this validator."
                    }
                },
                "required": [
                    "policy",
                    "rules",
                    "options"
                ],
                "description": "The input data for the SubmissionValidator ignore type.",
                "x-use-camelcase": true
            },
            "AssignmentDoneType": {
                "type": "string",
                "enum": [
                    "assigned_only",
                    "all_graders"
                ],
                "description": "Describes what type of reminder should be sent."
            },
            "PatchAssignmentData": {
                "type": "object",
                "properties": {
                    "state": {
                        "description": "The new state of the assignment",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/AssignmentStateEnum"
                            }
                        ]
                    },
                    "name": {
                        "type": "string",
                        "description": "The new name of the assignment"
                    },
                    "deadline": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The new deadline of the assignment"
                    },
                    "lock_date": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "description": "The new lock date of the assignment"
                    },
                    "max_grade": {
                        "type": "integer",
                        "minimum": 0,
                        "nullable": true,
                        "description": "The maximum possible grade for this assignment. You can reset this by passing `null` as value"
                    },
                    "group_set_id": {
                        "type": "integer",
                        "nullable": true,
                        "description": "The group set id for this assignment. Set to `null` to make this assignment not a group assignment"
                    },
                    "available_at": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "description": "The time the assignment should become available"
                    },
                    "send_login_links": {
                        "type": "boolean",
                        "description": "Should we send login links to students before the assignment opens. This is only available for assignments with 'kind' equal to 'exam'"
                    },
                    "kind": {
                        "description": "The new kind of assignment",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/AssignmentKind"
                            }
                        ]
                    },
                    "files_upload_enabled": {
                        "type": "boolean",
                        "description": "Should students be allowed to make submissions by uploading files"
                    },
                    "webhook_upload_enabled": {
                        "type": "boolean",
                        "description": "Should students be allowed to make submissions using git webhooks"
                    },
                    "max_submissions": {
                        "type": "integer",
                        "minimum": 1,
                        "nullable": true,
                        "description": "The maximum amount of submissions a user may create."
                    },
                    "cool_off_period": {
                        "type": "number",
                        "description": "The amount of time in seconds there should be between `amount_in_cool_off_period + 1` submissions."
                    },
                    "amount_in_cool_off_period": {
                        "type": "integer",
                        "minimum": 1,
                        "description": "The maximum amount of submissions that can be made within `cool_off_period` seconds. This should be higher than or equal to 1."
                    },
                    "ignore": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "$ref": "#/components/schemas/SubmissionValidator.InputData"
                            }
                        ],
                        "description": "The ignore file to use"
                    },
                    "ignore_version": {
                        "type": "string",
                        "enum": [
                            "EmptySubmissionFilter",
                            "IgnoreFilterManager",
                            "SubmissionValidator"
                        ],
                        "description": "The ignore version to use, defaults to \"IgnoreFilterManager\"."
                    },
                    "done_type": {
                        "description": "How to determine grading is done for this assignment, this value is not used when `reminder_time` is `null`.",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/AssignmentDoneType",
                                "nullable": true
                            }
                        ]
                    },
                    "reminder_time": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "description": "At what time should we send the reminder emails to the graders. This value is not used wehn `done_type` is `null`."
                    },
                    "done_email": {
                        "type": "string",
                        "nullable": true,
                        "description": "A list of emails that should receive an email when grading is done. This value has no effect when `done_type` is set to `null`."
                    }
                }
            },
            "AutoTest": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "This id of this AutoTest"
                    },
                    "fixtures": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AutoTestFixture"
                        },
                        "description": "The fixtures connected to this AutoTest"
                    },
                    "run_setup_script": {
                        "type": "string",
                        "description": "The setup script that will be executed before any test starts."
                    },
                    "setup_script": {
                        "type": "string",
                        "description": "The setup script that will be executed for each student. In this script the submission of the student is available."
                    },
                    "finalize_script": {
                        "type": "string",
                        "description": "Unused"
                    },
                    "grade_calculation": {
                        "type": "string",
                        "nullable": true,
                        "description": "The way the grade is calculated in this AutoTest. This is `null` if the options is still unset. This can be 'full' or 'partial'."
                    },
                    "sets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AutoTestSet"
                        },
                        "description": "The sets in this AutoTest. In the UI these are called levels."
                    },
                    "assignment_id": {
                        "type": "integer",
                        "description": "The id of the assignment to which this AutoTest belongs."
                    },
                    "runs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AutoTestRun"
                        },
                        "description": "The runs done with this AutoTest. This is list is always of length 0 or 1"
                    },
                    "results_always_visible": {
                        "type": "boolean",
                        "nullable": true,
                        "description": "If `true` This is `null` if the options is still unset."
                    },
                    "prefer_teacher_revision": {
                        "type": "boolean",
                        "nullable": true,
                        "description": "If `true` This is `null` if the options is still unset."
                    },
                    "enable_caching": {
                        "type": "boolean",
                        "description": "If `true` the output of the global setup script wil be cached."
                    }
                },
                "required": [
                    "id",
                    "fixtures",
                    "run_setup_script",
                    "setup_script",
                    "finalize_script",
                    "grade_calculation",
                    "sets",
                    "assignment_id",
                    "runs",
                    "results_always_visible",
                    "prefer_teacher_revision",
                    "enable_caching"
                ],
                "description": "An AutoTest as JSON.",
                "x-use-camelcase": true
            },
            "FixtureLike": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of the fixture"
                    }
                },
                "required": [
                    "id"
                ],
                "description": "A AutoTest fixture where only the id is required.",
                "x-use-camelcase": true
            },
            "JsonPatchAutoTest": {
                "type": "object",
                "properties": {
                    "setup_script": {
                        "type": "string",
                        "description": "The new setup script (per student) of the auto test."
                    },
                    "run_setup_script": {
                        "type": "string",
                        "description": "The new run setup script (global) of the auto test."
                    },
                    "has_new_fixtures": {
                        "type": "boolean",
                        "description": "If true all other files in the request will be used as new fixtures"
                    },
                    "enable_caching": {
                        "type": "boolean",
                        "description": "If true the output of the global setup script will be cached"
                    },
                    "grade_calculation": {
                        "type": "string",
                        "description": "The way to do grade calculation for this AutoTest."
                    },
                    "results_always_visible": {
                        "type": "boolean",
                        "nullable": true,
                        "description": "Should results be visible for students before the assignment is set to \"done\"?"
                    },
                    "prefer_teacher_revision": {
                        "type": "boolean",
                        "nullable": true,
                        "description": "If `true` we will use the teacher revision if available when running tests."
                    },
                    "fixtures": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FixtureLike"
                        },
                        "description": "A list of old fixtures you want to keep"
                    },
                    "overwrite_duplicate_fixtures": {
                        "type": "boolean",
                        "description": "If true existing fixtures with the same name as one of the new fixtures are deleted and no renaming is performed.",
                        "default": false
                    }
                }
            },
            "PatchAutoTestData": {
                "type": "object",
                "properties": {
                    "json": {
                        "$ref": "#/components/schemas/JsonPatchAutoTest"
                    },
                    "fixture": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "binary"
                        }
                    }
                },
                "required": [
                    "json"
                ]
            },
            "AutoTestSet": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "The id of this set."
                    },
                    "suites": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AutoTestSuite"
                        },
                        "description": "The suites connected to this set. In the UI these are called \"categories\""
                    },
                    "stop_points": {
                        "type": "number",
                        "description": "A floating indicating the minimum percentage of points a student should achieve after this set (or \"level\"). If this percentage is not achieved the AutoTest will stop running."
                    }
                },
                "required": [
                    "id",
                    "suites",
                    "stop_points"
                ],
                "description": "The result as JSON.",
                "x-use-camelcase": true
            },
            "UpdateSetAutoTestData": {
                "type": "object",
                "properties": {
                    "stop_points": {
                        "type": "number",
                        "description": "The minimum percentage a student should have achieved before the next tests will be run."
                    }
                }
            },
            "ExtendedCourse": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Course"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "assignments": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Assignment"
                                },
                                "description": "The assignments connected to this assignment."
                            },
                            "group_sets": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/GroupSet"
                                },
                                "description": "The groups sets of this course."
                            },
                            "snippets": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/CourseSnippet"
                                },
                                "description": "The snippets of this course."
                            }
                        },
                        "required": [
                            "assignments",
                            "group_sets",
                            "snippets"
                        ]
                    }
                ],
                "description": "The way this class will be represented in extended JSON."
            },
            "CourseState": {
                "type": "string",
                "enum": [
                    "visible",
                    "archived",
                    "deleted"
                ],
                "description": "Describes in what state a <span data-role=\"class\">.Course</span> is."
            },
            "PatchCourseData": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The new name of the course"
                    },
                    "state": {
                        "description": "The new state of the course, currently you cannot set the state of a course to 'deleted'",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/CourseState"
                            }
                        ]
                    }
                }
            },
            "NotificationReasons": {
                "type": "string",
                "enum": [
                    "assignee",
                    "author",
                    "replied"
                ],
                "description": "The reason a user received a notification."
            },
            "EmailNotificationTypes": {
                "type": "string",
                "enum": [
                    "direct",
                    "daily",
                    "weekly",
                    "off"
                ],
                "description": "The possible options for preferences for sending email notifications."
            },
            "PatchNotificationSettingUser SettingData": {
                "type": "object",
                "properties": {
                    "reason": {
                        "description": "For what type notification do you want to change the settings.",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/NotificationReasons"
                            }
                        ]
                    },
                    "value": {
                        "description": "The new value of the notification setting.",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/EmailNotificationTypes"
                            }
                        ]
                    }
                },
                "required": [
                    "reason",
                    "value"
                ]
            },
            "AutoTestSuite": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "The id of this suite (or \"category\")"
                    },
                    "steps": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AutoTestStepBase"
                        },
                        "description": "The steps that will be executed in this suite."
                    },
                    "rubric_row": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/RubricRowBase"
                            }
                        ],
                        "description": "The rubric row this category is connected to."
                    },
                    "network_disabled": {
                        "type": "boolean",
                        "description": "Is the network disabled while running this category."
                    },
                    "submission_info": {
                        "type": "boolean",
                        "description": "Will submission info be available while running this step."
                    },
                    "command_time_limit": {
                        "type": "number",
                        "nullable": true,
                        "description": "The maximum amount of time in seconds a step (or substep) may take. If `null` the instance default will be used."
                    }
                },
                "required": [
                    "id",
                    "steps",
                    "rubric_row",
                    "network_disabled",
                    "submission_info",
                    "command_time_limit"
                ],
                "description": "The set as JSON.",
                "x-use-camelcase": true
            },
            "BaseAutoTestStepBase": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of this step."
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of AutoTest step. We constantly add new step types, so don't try to store this as an enum."
                    },
                    "weight": {
                        "type": "number",
                        "description": "The amount of weight this step should have."
                    },
                    "hidden": {
                        "type": "boolean",
                        "description": "Is this step hidden? If `true` in most cases students will not be able to see this step and its details."
                    },
                    "data": {
                        "description": "The data used to run this step. The data shape is dependent on your permissions and the step type."
                    }
                },
                "required": [
                    "name",
                    "type",
                    "weight",
                    "hidden",
                    "data"
                ],
                "description": "The base JSON for a step, used for both input and output.",
                "x-use-camelcase": true
            },
            "AutoTestStepBase.InputAsJSON": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BaseAutoTestStepBase"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer",
                                "description": "The id of the step. Provide this if you want to edit an existing step. If not provided a new step will be created."
                            },
                            "description": {
                                "type": "string",
                                "nullable": true,
                                "description": "Description template for this step that is shown to students."
                            }
                        }
                    }
                ],
                "description": "The input data needed for a new AutoTest step."
            },
            "UpdateSuiteAutoTestData": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "The id of the suite you want to edit. If not provided we will create a new suite."
                    },
                    "steps": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AutoTestStepBase.InputAsJSON"
                        },
                        "description": "The steps that should be in this suite. They will be run as the order they are provided in."
                    },
                    "rubric_row_id": {
                        "type": "integer",
                        "description": "The id of the rubric row that should be connected to this suite."
                    },
                    "network_disabled": {
                        "type": "boolean",
                        "description": "Should the network be disabled when running steps in this suite"
                    },
                    "submission_info": {
                        "type": "boolean",
                        "description": "If passed as `true` Defaults to `false` when creating new suites."
                    },
                    "command_time_limit": {
                        "type": "number",
                        "description": "The maximum amount of time a single step (or substeps) can take when running tests. If not provided the default value is depended on configuration of the instance."
                    }
                },
                "required": [
                    "steps",
                    "rubric_row_id",
                    "network_disabled"
                ]
            },
            "AllSiteSettings": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/FrontendSiteSettings"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "AUTO_TEST_HEARTBEAT_INTERVAL": {
                                "type": "number",
                                "format": "time-delta",
                                "description": "The amount of time there can be between two heartbeats of a runner. Changing this to a lower value might cause some runners to crash."
                            },
                            "AUTO_TEST_HEARTBEAT_MAX_MISSED": {
                                "type": "integer",
                                "description": "The max amount of heartbeats that we may miss from a runner before we kill it and start a new one."
                            },
                            "AUTO_TEST_MAX_JOBS_PER_RUNNER": {
                                "type": "integer",
                                "description": "This value determines the amount of runners we request for a single assignment. The amount of runners requested is equal to the amount of students not yet started divided by this value."
                            },
                            "AUTO_TEST_MAX_CONCURRENT_BATCH_RUNS": {
                                "type": "integer",
                                "description": "The maximum amount of batch AutoTest runs we will do at a time. AutoTest batch runs are runs that are done after the deadline for configurations that have hidden tests. Increasing this variable might cause heavy server load."
                            },
                            "MIN_PASSWORD_SCORE": {
                                "type": "integer",
                                "description": "The minimum strength passwords by users should have. The higher this value the stronger the password should be. When increasing the strength all users with too weak passwords will be shown a warning on the next login."
                            },
                            "RESET_TOKEN_TIME": {
                                "type": "number",
                                "format": "time-delta",
                                "description": "The amount of time a reset token is valid. You should not increase this value too much as users might be not be too careful with these tokens. Increasing this value will allow **all** existing tokens to live longer."
                            },
                            "SETTING_TOKEN_TIME": {
                                "type": "number",
                                "format": "time-delta",
                                "description": "The amount of time the link send in notification emails to change the notification preferences works to actually change the notifications."
                            },
                            "MAX_NUMBER_OF_FILES": {
                                "type": "integer",
                                "description": "The maximum amount of files and directories allowed in a single archive."
                            },
                            "MAX_LARGE_UPLOAD_SIZE": {
                                "type": "integer",
                                "description": "The maximum size of uploaded files that are mostly uploaded by \"trusted\" users. Examples of these kind of files include AutoTest fixtures and plagiarism base code."
                            },
                            "MAX_NORMAL_UPLOAD_SIZE": {
                                "type": "integer",
                                "description": "The maximum total size of uploaded files that are uploaded by normal users. This is also the maximum total size of submissions. Increasing this size might cause a hosting costs to increase."
                            },
                            "MAX_FILE_SIZE": {
                                "type": "integer",
                                "description": "The maximum size of a single file uploaded by normal users. This limit is really here to prevent users from uploading extremely large files which can't really be downloaded/shown anyway."
                            },
                            "JWT_ACCESS_TOKEN_EXPIRES": {
                                "type": "number",
                                "format": "time-delta",
                                "description": "The time a login session is valid. After this amount of time a user will always need to re-authenticate."
                            }
                        },
                        "required": [
                            "AUTO_TEST_HEARTBEAT_INTERVAL",
                            "AUTO_TEST_HEARTBEAT_MAX_MISSED",
                            "AUTO_TEST_MAX_JOBS_PER_RUNNER",
                            "AUTO_TEST_MAX_CONCURRENT_BATCH_RUNS",
                            "MIN_PASSWORD_SCORE",
                            "RESET_TOKEN_TIME",
                            "SETTING_TOKEN_TIME",
                            "MAX_NUMBER_OF_FILES",
                            "MAX_LARGE_UPLOAD_SIZE",
                            "MAX_NORMAL_UPLOAD_SIZE",
                            "MAX_FILE_SIZE",
                            "JWT_ACCESS_TOKEN_EXPIRES"
                        ]
                    }
                ],
                "description": "The JSON representation of all options."
            },
            "FrontendSiteSettings": {
                "type": "object",
                "properties": {
                    "AUTO_TEST_MAX_TIME_COMMAND": {
                        "type": "number",
                        "format": "time-delta",
                        "description": "The default amount of time a step/substep in AutoTest can run. This can be overridden by the teacher."
                    },
                    "AUTO_TEST_IO_TEST_MESSAGE": {
                        "type": "string",
                        "description": "Default message for IO Test steps of an AutoTest."
                    },
                    "AUTO_TEST_IO_TEST_SUB_MESSAGE": {
                        "type": "string",
                        "description": "Default message for IO Test sub-steps of an AutoTest."
                    },
                    "AUTO_TEST_RUN_PROGRAM_MESSAGE": {
                        "type": "string",
                        "description": "Default message for Run Program steps of an AutoTest."
                    },
                    "AUTO_TEST_CAPTURE_POINTS_MESSAGE": {
                        "type": "string",
                        "description": "Default message for Capture Points steps of an AutoTest."
                    },
                    "AUTO_TEST_CHECKPOINT_MESSAGE": {
                        "type": "string",
                        "description": "Default message for Checkpoint steps of an AutoTest."
                    },
                    "AUTO_TEST_UNIT_TEST_MESSAGE": {
                        "type": "string",
                        "description": "Default message for Unit Test steps of an AutoTest."
                    },
                    "AUTO_TEST_CODE_QUALITY_MESSAGE": {
                        "type": "string",
                        "description": "Default message for Code Quality steps of an AutoTest."
                    },
                    "EXAM_LOGIN_MAX_LENGTH": {
                        "type": "number",
                        "format": "time-delta",
                        "description": "The maximum time-delta an exam may take. Increasing this value also increases the maximum amount of time the login tokens send via email are valid. Therefore, you should make this too long."
                    },
                    "LOGIN_TOKEN_BEFORE_TIME": {
                        "type": "array",
                        "items": {
                            "type": "number",
                            "format": "time-delta"
                        },
                        "description": "This determines how long before the exam we will send the login emails to the students (only when enabled of course)."
                    },
                    "SITE_EMAIL": {
                        "type": "string",
                        "description": "The email shown to users as the email of CodeGrade."
                    },
                    "MAX_LINES": {
                        "type": "integer",
                        "description": "The maximum amount of lines that we should in render in one go. If a file contains more lines than this we will show a warning asking the user what to do."
                    },
                    "NOTIFICATION_POLL_TIME": {
                        "type": "number",
                        "format": "time-delta",
                        "description": "The amount of time to wait between two consecutive polls to see if a user has new notifications. Setting this value too low will cause unnecessary stres on the server."
                    },
                    "RELEASE_MESSAGE_MAX_TIME": {
                        "type": "number",
                        "format": "time-delta",
                        "description": "What is the maximum amount of time after a release a message should be shown on the HomeGrid. **Note**: this is the amount of time after the release, not after this instance has been upgraded to this release."
                    },
                    "MAX_PLAGIARISM_MATCHES": {
                        "type": "integer",
                        "description": "The maximum amount of matches of a plagiarism run that we will store. If there are more matches than this they will be discarded."
                    },
                    "AUTO_TEST_MAX_GLOBAL_SETUP_TIME": {
                        "type": "number",
                        "format": "time-delta",
                        "description": "The maximum amount of time that the global setup script in AutoTest may take. If it takes longer than this it will be killed and the run will fail."
                    },
                    "AUTO_TEST_MAX_PER_STUDENT_SETUP_TIME": {
                        "type": "number",
                        "format": "time-delta",
                        "description": "The maximum amount of time that the per student setup script in AutoTest may take. If it takes longer than this it will be killed and the result of the student will be in the state \"timed-out\""
                    },
                    "SERVER_TIME_DIFF_TOLERANCE": {
                        "type": "number",
                        "format": "time-delta",
                        "description": "The maximum amount of difference between the server time and the local time before we consider the local time to be out of sync with our servers."
                    },
                    "BLACKBOARD_ZIP_UPLOAD_ENABLED": {
                        "type": "boolean",
                        "description": "If enabled teachers are allowed to bulk upload submissions (and create users) using a zip file in a format created by Blackboard."
                    },
                    "RUBRICS_ENABLED": {
                        "type": "boolean",
                        "description": "If enabled teachers can use rubrics on CodeGrade. Disabling this feature will not delete existing rubrics."
                    },
                    "AUTOMATIC_LTI_ROLE_ENABLED": {
                        "type": "boolean",
                        "description": "Currently unused"
                    },
                    "LTI_ENABLED": {
                        "type": "boolean",
                        "description": "Should LTI be enabled."
                    },
                    "LINTERS_ENABLED": {
                        "type": "boolean",
                        "description": "Should linters be enabled"
                    },
                    "INCREMENTAL_RUBRIC_SUBMISSION_ENABLED": {
                        "type": "boolean",
                        "description": "Should rubrics be submitted incrementally, so if a user selects a item should this be automatically be submitted to the server, or should it only be possible to submit a complete rubric at once. This feature is useless if rubrics is not set to true."
                    },
                    "REGISTER_ENABLED": {
                        "type": "boolean",
                        "description": "Should it be possible to register on the website. This makes it possible for any body to register an account on the website."
                    },
                    "GROUPS_ENABLED": {
                        "type": "boolean",
                        "description": "Should group assignments be enabled."
                    },
                    "AUTO_TEST_ENABLED": {
                        "type": "boolean",
                        "description": "Should auto test be enabled."
                    },
                    "COURSE_REGISTER_ENABLED": {
                        "type": "boolean",
                        "description": "Should it be possible for teachers to create links that users can use to register in a course. Links to enroll can be created even if this feature is disabled."
                    },
                    "RENDER_HTML_ENABLED": {
                        "type": "boolean",
                        "description": "Should it be possible to render html files within CodeGrade. This opens up more attack surfaces as it is now possible by design for students to run javascript. This is all done in a sandboxed iframe but still."
                    },
                    "EMAIL_STUDENTS_ENABLED": {
                        "type": "boolean",
                        "description": "Should it be possible to email students."
                    },
                    "PEER_FEEDBACK_ENABLED": {
                        "type": "boolean",
                        "description": "Should peer feedback be enabled."
                    },
                    "AT_IMAGE_CACHING_ENABLED": {
                        "type": "boolean",
                        "description": "Should AT image caching be enabled."
                    }
                },
                "required": [
                    "AUTO_TEST_MAX_TIME_COMMAND",
                    "AUTO_TEST_IO_TEST_MESSAGE",
                    "AUTO_TEST_IO_TEST_SUB_MESSAGE",
                    "AUTO_TEST_RUN_PROGRAM_MESSAGE",
                    "AUTO_TEST_CAPTURE_POINTS_MESSAGE",
                    "AUTO_TEST_CHECKPOINT_MESSAGE",
                    "AUTO_TEST_UNIT_TEST_MESSAGE",
                    "AUTO_TEST_CODE_QUALITY_MESSAGE",
                    "EXAM_LOGIN_MAX_LENGTH",
                    "LOGIN_TOKEN_BEFORE_TIME",
                    "SITE_EMAIL",
                    "MAX_LINES",
                    "NOTIFICATION_POLL_TIME",
                    "RELEASE_MESSAGE_MAX_TIME",
                    "MAX_PLAGIARISM_MATCHES",
                    "AUTO_TEST_MAX_GLOBAL_SETUP_TIME",
                    "AUTO_TEST_MAX_PER_STUDENT_SETUP_TIME",
                    "SERVER_TIME_DIFF_TOLERANCE",
                    "BLACKBOARD_ZIP_UPLOAD_ENABLED",
                    "RUBRICS_ENABLED",
                    "AUTOMATIC_LTI_ROLE_ENABLED",
                    "LTI_ENABLED",
                    "LINTERS_ENABLED",
                    "INCREMENTAL_RUBRIC_SUBMISSION_ENABLED",
                    "REGISTER_ENABLED",
                    "GROUPS_ENABLED",
                    "AUTO_TEST_ENABLED",
                    "COURSE_REGISTER_ENABLED",
                    "RENDER_HTML_ENABLED",
                    "EMAIL_STUDENTS_ENABLED",
                    "PEER_FEEDBACK_ENABLED",
                    "AT_IMAGE_CACHING_ENABLED"
                ],
                "description": "The JSON representation of options visible to all users.",
                "x-use-camelcase": true
            },
            "SiteSettingInput": {
                "anyOf": [
                    {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "enum": [
                                    "AUTO_TEST_MAX_TIME_COMMAND"
                                ],
                                "description": ""
                            },
                            "value": {
                                "anyOf": [
                                    {
                                        "type": "integer"
                                    },
                                    {
                                        "type": "string",
                                        "format": "time-delta"
                                    }
                                ],
                                "nullable": true,
                                "description": ""
                            }
                        },
                        "required": [
                            "name",
                            "value"
                        ],
                        "x-model-name": "AutoTestMaxTimeCommandSetting"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "enum": [
                                    "AUTO_TEST_HEARTBEAT_INTERVAL"
                                ],
                                "description": ""
                            },
                            "value": {
                                "anyOf": [
                                    {
                                        "type": "integer"
                                    },
                                    {
                                        "type": "string",
                                        "format": "time-delta"
                                    }
                                ],
                                "nullable": true,
                                "description": ""
                            }
                        },
                        "required": [
                            "name",
                            "value"
                        ],
                        "x-model-name": "AutoTestHeartbeatIntervalSetting"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "enum": [
                                    "AUTO_TEST_HEARTBEAT_MAX_MISSED"
                                ],
                                "description": ""
                            },
                            "value": {
                                "type": "integer",
                                "nullable": true,
                                "description": ""
                            }
                        },
                        "required": [
                            "name",
                            "value"
                        ],
                        "x-model-name": "AutoTestHeartbeatMaxMissedSetting"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "enum": [
                                    "AUTO_TEST_MAX_JOBS_PER_RUNNER"
                                ],
                                "description": ""
                            },
                            "value": {
                                "type": "integer",
                                "nullable": true,
                                "description": ""
                            }
                        },
                        "required": [
                            "name",
                            "value"
                        ],
                        "x-model-name": "AutoTestMaxJobsPerRunnerSetting"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "enum": [
                                    "AUTO_TEST_MAX_CONCURRENT_BATCH_RUNS"
                                ],
                                "description": ""
                            },
                            "value": {
                                "type": "integer",
                                "nullable": true,
                                "description": ""
                            }
                        },
                        "required": [
                            "name",
                            "value"
                        ],
                        "x-model-name": "AutoTestMaxConcurrentBatchRunsSetting"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "enum": [
                                    "AUTO_TEST_IO_TEST_MESSAGE"
                                ],
                                "description": ""
                            },
                            "value": {
                                "type": "string",
                                "nullable": true,
                                "description": ""
                            }
                        },
                        "required": [
                            "name",
                            "value"
                        ],
                        "x-model-name": "AutoTestIoTestMessageSetting"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "enum": [
                                    "AUTO_TEST_IO_TEST_SUB_MESSAGE"
                                ],
                                "description": ""
                            },
                            "value": {
                                "type": "string",
                                "nullable": true,
                                "description": ""
                            }
                        },
                        "required": [
                            "name",
                            "value"
                        ],
                        "x-model-name": "AutoTestIoTestSubMessageSetting"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "enum": [
                                    "AUTO_TEST_RUN_PROGRAM_MESSAGE"
                                ],
                                "description": ""
                            },
                            "value": {
                                "type": "string",
                                "nullable": true,
                                "description": ""
                            }
                        },
                        "required": [
                            "name",
                            "value"
                        ],
                        "x-model-name": "AutoTestRunProgramMessageSetting"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "enum": [
                                    "AUTO_TEST_CAPTURE_POINTS_MESSAGE"
                                ],
                                "description": ""
                            },
                            "value": {
                                "type": "string",
                                "nullable": true,
                                "description": ""
                            }
                        },
                        "required": [
                            "name",
                            "value"
                        ],
                        "x-model-name": "AutoTestCapturePointsMessageSetting"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "enum": [
                                    "AUTO_TEST_CHECKPOINT_MESSAGE"
                                ],
                                "description": ""
                            },
                            "value": {
                                "type": "string",
                                "nullable": true,
                                "description": ""
                            }
                        },
                        "required": [
                            "name",
                            "value"
                        ],
                        "x-model-name": "AutoTestCheckpointMessageSetting"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "enum": [
                                    "AUTO_TEST_UNIT_TEST_MESSAGE"
                                ],
                                "description": ""
                            },
                            "value": {
                                "type": "string",
                                "nullable": true,
                                "description": ""
                            }
                        },
                        "required": [
                            "name",
                            "value"
                        ],
                        "x-model-name": "AutoTestUnitTestMessageSetting"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "enum": [
                                    "AUTO_TEST_CODE_QUALITY_MESSAGE"
                                ],
                                "description": ""
                            },
                            "value": {
                                "type": "string",
                                "nullable": true,
                                "description": ""
                            }
                        },
                        "required": [
                            "name",
                            "value"
                        ],
                        "x-model-name": "AutoTestCodeQualityMessageSetting"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "enum": [
                                    "EXAM_LOGIN_MAX_LENGTH"
                                ],
                                "description": ""
                            },
                            "value": {
                                "anyOf": [
                                    {
                                        "type": "integer"
                                    },
                                    {
                                        "type": "string",
                                        "format": "time-delta"
                                    }
                                ],
                                "nullable": true,
                                "description": ""
                            }
                        },
                        "required": [
                            "name",
                            "value"
                        ],
                        "x-model-name": "ExamLoginMaxLengthSetting"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "enum": [
                                    "LOGIN_TOKEN_BEFORE_TIME"
                                ],
                                "description": ""
                            },
                            "value": {
                                "type": "array",
                                "items": {
                                    "anyOf": [
                                        {
                                            "type": "integer"
                                        },
                                        {
                                            "type": "string",
                                            "format": "time-delta"
                                        }
                                    ]
                                },
                                "nullable": true,
                                "description": ""
                            }
                        },
                        "required": [
                            "name",
                            "value"
                        ],
                        "x-model-name": "LoginTokenBeforeTimeSetting"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "enum": [
                                    "MIN_PASSWORD_SCORE"
                                ],
                                "description": ""
                            },
                            "value": {
                                "type": "integer",
                                "nullable": true,
                                "description": ""
                            }
                        },
                        "required": [
                            "name",
                            "value"
                        ],
                        "x-model-name": "MinPasswordScoreSetting"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "enum": [
                                    "RESET_TOKEN_TIME"
                                ],
                                "description": ""
                            },
                            "value": {
                                "anyOf": [
                                    {
                                        "type": "integer"
                                    },
                                    {
                                        "type": "string",
                                        "format": "time-delta"
                                    }
                                ],
                                "nullable": true,
                                "description": ""
                            }
                        },
                        "required": [
                            "name",
                            "value"
                        ],
                        "x-model-name": "ResetTokenTimeSetting"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "enum": [
                                    "SETTING_TOKEN_TIME"
                                ],
                                "description": ""
                            },
                            "value": {
                                "anyOf": [
                                    {
                                        "type": "integer"
                                    },
                                    {
                                        "type": "string",
                                        "format": "time-delta"
                                    }
                                ],
                                "nullable": true,
                                "description": ""
                            }
                        },
                        "required": [
                            "name",
                            "value"
                        ],
                        "x-model-name": "SettingTokenTimeSetting"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "enum": [
                                    "SITE_EMAIL"
                                ],
                                "description": ""
                            },
                            "value": {
                                "type": "string",
                                "nullable": true,
                                "description": ""
                            }
                        },
                        "required": [
                            "name",
                            "value"
                        ],
                        "x-model-name": "SiteEmailSetting"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "enum": [
                                    "MAX_NUMBER_OF_FILES"
                                ],
                                "description": ""
                            },
                            "value": {
                                "type": "integer",
                                "nullable": true,
                                "description": ""
                            }
                        },
                        "required": [
                            "name",
                            "value"
                        ],
                        "x-model-name": "MaxNumberOfFilesSetting"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "enum": [
                                    "MAX_LARGE_UPLOAD_SIZE"
                                ],
                                "description": ""
                            },
                            "value": {
                                "anyOf": [
                                    {
                                        "type": "integer"
                                    },
                                    {
                                        "type": "string",
                                        "pattern": "^\\d+(k|m|g)?b$"
                                    }
                                ],
                                "nullable": true,
                                "description": ""
                            }
                        },
                        "required": [
                            "name",
                            "value"
                        ],
                        "x-model-name": "MaxLargeUploadSizeSetting"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "enum": [
                                    "MAX_NORMAL_UPLOAD_SIZE"
                                ],
                                "description": ""
                            },
                            "value": {
                                "anyOf": [
                                    {
                                        "type": "integer"
                                    },
                                    {
                                        "type": "string",
                                        "pattern": "^\\d+(k|m|g)?b$"
                                    }
                                ],
                                "nullable": true,
                                "description": ""
                            }
                        },
                        "required": [
                            "name",
                            "value"
                        ],
                        "x-model-name": "MaxNormalUploadSizeSetting"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "enum": [
                                    "MAX_FILE_SIZE"
                                ],
                                "description": ""
                            },
                            "value": {
                                "anyOf": [
                                    {
                                        "type": "integer"
                                    },
                                    {
                                        "type": "string",
                                        "pattern": "^\\d+(k|m|g)?b$"
                                    }
                                ],
                                "nullable": true,
                                "description": ""
                            }
                        },
                        "required": [
                            "name",
                            "value"
                        ],
                        "x-model-name": "MaxFileSizeSetting"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "enum": [
                                    "JWT_ACCESS_TOKEN_EXPIRES"
                                ],
                                "description": ""
                            },
                            "value": {
                                "anyOf": [
                                    {
                                        "type": "integer"
                                    },
                                    {
                                        "type": "string",
                                        "format": "time-delta"
                                    }
                                ],
                                "nullable": true,
                                "description": ""
                            }
                        },
                        "required": [
                            "name",
                            "value"
                        ],
                        "x-model-name": "JwtAccessTokenExpiresSetting"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "enum": [
                                    "MAX_LINES"
                                ],
                                "description": ""
                            },
                            "value": {
                                "type": "integer",
                                "nullable": true,
                                "description": ""
                            }
                        },
                        "required": [
                            "name",
                            "value"
                        ],
                        "x-model-name": "MaxLinesSetting"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "enum": [
                                    "NOTIFICATION_POLL_TIME"
                                ],
                                "description": ""
                            },
                            "value": {
                                "anyOf": [
                                    {
                                        "type": "integer"
                                    },
                                    {
                                        "type": "string",
                                        "format": "time-delta"
                                    }
                                ],
                                "nullable": true,
                                "description": ""
                            }
                        },
                        "required": [
                            "name",
                            "value"
                        ],
                        "x-model-name": "NotificationPollTimeSetting"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "enum": [
                                    "RELEASE_MESSAGE_MAX_TIME"
                                ],
                                "description": ""
                            },
                            "value": {
                                "anyOf": [
                                    {
                                        "type": "integer"
                                    },
                                    {
                                        "type": "string",
                                        "format": "time-delta"
                                    }
                                ],
                                "nullable": true,
                                "description": ""
                            }
                        },
                        "required": [
                            "name",
                            "value"
                        ],
                        "x-model-name": "ReleaseMessageMaxTimeSetting"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "enum": [
                                    "MAX_PLAGIARISM_MATCHES"
                                ],
                                "description": ""
                            },
                            "value": {
                                "type": "integer",
                                "nullable": true,
                                "description": ""
                            }
                        },
                        "required": [
                            "name",
                            "value"
                        ],
                        "x-model-name": "MaxPlagiarismMatchesSetting"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "enum": [
                                    "AUTO_TEST_MAX_GLOBAL_SETUP_TIME"
                                ],
                                "description": ""
                            },
                            "value": {
                                "anyOf": [
                                    {
                                        "type": "integer"
                                    },
                                    {
                                        "type": "string",
                                        "format": "time-delta"
                                    }
                                ],
                                "nullable": true,
                                "description": ""
                            }
                        },
                        "required": [
                            "name",
                            "value"
                        ],
                        "x-model-name": "AutoTestMaxGlobalSetupTimeSetting"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "enum": [
                                    "AUTO_TEST_MAX_PER_STUDENT_SETUP_TIME"
                                ],
                                "description": ""
                            },
                            "value": {
                                "anyOf": [
                                    {
                                        "type": "integer"
                                    },
                                    {
                                        "type": "string",
                                        "format": "time-delta"
                                    }
                                ],
                                "nullable": true,
                                "description": ""
                            }
                        },
                        "required": [
                            "name",
                            "value"
                        ],
                        "x-model-name": "AutoTestMaxPerStudentSetupTimeSetting"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "enum": [
                                    "SERVER_TIME_DIFF_TOLERANCE"
                                ],
                                "description": ""
                            },
                            "value": {
                                "anyOf": [
                                    {
                                        "type": "integer"
                                    },
                                    {
                                        "type": "string",
                                        "format": "time-delta"
                                    }
                                ],
                                "nullable": true,
                                "description": ""
                            }
                        },
                        "required": [
                            "name",
                            "value"
                        ],
                        "x-model-name": "ServerTimeDiffToleranceSetting"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "enum": [
                                    "BLACKBOARD_ZIP_UPLOAD_ENABLED"
                                ],
                                "description": ""
                            },
                            "value": {
                                "type": "boolean",
                                "nullable": true,
                                "description": ""
                            }
                        },
                        "required": [
                            "name",
                            "value"
                        ],
                        "x-model-name": "BlackboardZipUploadEnabledSetting"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "enum": [
                                    "RUBRICS_ENABLED"
                                ],
                                "description": ""
                            },
                            "value": {
                                "type": "boolean",
                                "nullable": true,
                                "description": ""
                            }
                        },
                        "required": [
                            "name",
                            "value"
                        ],
                        "x-model-name": "RubricsEnabledSetting"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "enum": [
                                    "AUTOMATIC_LTI_ROLE_ENABLED"
                                ],
                                "description": ""
                            },
                            "value": {
                                "type": "boolean",
                                "nullable": true,
                                "description": ""
                            }
                        },
                        "required": [
                            "name",
                            "value"
                        ],
                        "x-model-name": "AutomaticLtiRoleEnabledSetting"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "enum": [
                                    "LTI_ENABLED"
                                ],
                                "description": ""
                            },
                            "value": {
                                "type": "boolean",
                                "nullable": true,
                                "description": ""
                            }
                        },
                        "required": [
                            "name",
                            "value"
                        ],
                        "x-model-name": "LtiEnabledSetting"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "enum": [
                                    "LINTERS_ENABLED"
                                ],
                                "description": ""
                            },
                            "value": {
                                "type": "boolean",
                                "nullable": true,
                                "description": ""
                            }
                        },
                        "required": [
                            "name",
                            "value"
                        ],
                        "x-model-name": "LintersEnabledSetting"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "enum": [
                                    "INCREMENTAL_RUBRIC_SUBMISSION_ENABLED"
                                ],
                                "description": ""
                            },
                            "value": {
                                "type": "boolean",
                                "nullable": true,
                                "description": ""
                            }
                        },
                        "required": [
                            "name",
                            "value"
                        ],
                        "x-model-name": "IncrementalRubricSubmissionEnabledSetting"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "enum": [
                                    "REGISTER_ENABLED"
                                ],
                                "description": ""
                            },
                            "value": {
                                "type": "boolean",
                                "nullable": true,
                                "description": ""
                            }
                        },
                        "required": [
                            "name",
                            "value"
                        ],
                        "x-model-name": "RegisterEnabledSetting"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "enum": [
                                    "GROUPS_ENABLED"
                                ],
                                "description": ""
                            },
                            "value": {
                                "type": "boolean",
                                "nullable": true,
                                "description": ""
                            }
                        },
                        "required": [
                            "name",
                            "value"
                        ],
                        "x-model-name": "GroupsEnabledSetting"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "enum": [
                                    "AUTO_TEST_ENABLED"
                                ],
                                "description": ""
                            },
                            "value": {
                                "type": "boolean",
                                "nullable": true,
                                "description": ""
                            }
                        },
                        "required": [
                            "name",
                            "value"
                        ],
                        "x-model-name": "AutoTestEnabledSetting"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "enum": [
                                    "COURSE_REGISTER_ENABLED"
                                ],
                                "description": ""
                            },
                            "value": {
                                "type": "boolean",
                                "nullable": true,
                                "description": ""
                            }
                        },
                        "required": [
                            "name",
                            "value"
                        ],
                        "x-model-name": "CourseRegisterEnabledSetting"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "enum": [
                                    "RENDER_HTML_ENABLED"
                                ],
                                "description": ""
                            },
                            "value": {
                                "type": "boolean",
                                "nullable": true,
                                "description": ""
                            }
                        },
                        "required": [
                            "name",
                            "value"
                        ],
                        "x-model-name": "RenderHtmlEnabledSetting"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "enum": [
                                    "EMAIL_STUDENTS_ENABLED"
                                ],
                                "description": ""
                            },
                            "value": {
                                "type": "boolean",
                                "nullable": true,
                                "description": ""
                            }
                        },
                        "required": [
                            "name",
                            "value"
                        ],
                        "x-model-name": "EmailStudentsEnabledSetting"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "enum": [
                                    "PEER_FEEDBACK_ENABLED"
                                ],
                                "description": ""
                            },
                            "value": {
                                "type": "boolean",
                                "nullable": true,
                                "description": ""
                            }
                        },
                        "required": [
                            "name",
                            "value"
                        ],
                        "x-model-name": "PeerFeedbackEnabledSetting"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "enum": [
                                    "AT_IMAGE_CACHING_ENABLED"
                                ],
                                "description": ""
                            },
                            "value": {
                                "type": "boolean",
                                "nullable": true,
                                "description": ""
                            }
                        },
                        "required": [
                            "name",
                            "value"
                        ],
                        "x-model-name": "AtImageCachingEnabledSetting"
                    }
                ]
            },
            "PatchSite SettingsData": {
                "type": "object",
                "properties": {
                    "updates": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SiteSettingInput"
                        },
                        "description": "The items you want to update"
                    }
                },
                "required": [
                    "updates"
                ]
            },
            "PatchGraderSubmissionData": {
                "type": "object",
                "properties": {
                    "user_id": {
                        "type": "integer",
                        "description": "Id of the new grader."
                    }
                },
                "required": [
                    "user_id"
                ]
            },
            "UIPreferenceName": {
                "type": "string",
                "enum": [
                    "rubric_editor_v2",
                    "no_msg_for_mosaic_1",
                    "no_msg_for_mosaic_2",
                    "no_msg_for_mosaic_3",
                    "no_msg_for_nobel",
                    "no_msg_for_nobel_1",
                    "no_msg_for_nobel_2",
                    "no_msg_for_orchid"
                ],
                "description": "The all defined UI preferences."
            },
            "PatchUiPreferenceUser SettingData": {
                "type": "object",
                "properties": {
                    "name": {
                        "description": "The ui preference you want to change.",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/UIPreferenceName"
                            }
                        ]
                    },
                    "value": {
                        "type": "boolean",
                        "description": "The new value of the preference."
                    }
                },
                "required": [
                    "name",
                    "value"
                ]
            }
        },
        "securitySchemes": {
            "bearerAuth": {
                "type": "http",
                "scheme": "bearer",
                "bearerFormat": "JWT"
            }
        },
        "responses": {
            "IncorrectParametersError": {
                "description": "Some parameters were wrong",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/BaseError"
                        }
                    }
                }
            },
            "IncorrectPermissionsError": {
                "description": "You do not have the necessary permission to this",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/BaseError"
                        }
                    }
                }
            },
            "UnauthorizedError": {
                "description": "Access token is missing or invalid",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/BaseError"
                        }
                    }
                }
            },
            "NotFoundError": {
                "description": "A requested object was not found",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/BaseError"
                        }
                    }
                }
            },
            "UnknownError": {
                "description": "Something unknown error",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/BaseError"
                        }
                    }
                }
            }
        }
    }
}